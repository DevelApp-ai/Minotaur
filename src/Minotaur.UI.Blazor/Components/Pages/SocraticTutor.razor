@page "/socratic-tutor"
@using Minotaur.UI.Blazor.Models
@using Minotaur.UI.Blazor.Services
@inject SocraticTutorService TutorService
@inject IJSRuntime JSRuntime

<PageTitle>Socratic Tutor - Minotaur Grammar Tool</PageTitle>

<div class="socratic-tutor-container">
    <div class="tutor-header">
        <h2><i class="bi bi-chat-dots"></i> Socratic Learning Tutor</h2>
        <p class="lead">Learn through guided inquiry and discovery</p>
        
        @if (currentSession != null)
        {
            <div class="session-info">
                <span class="badge bg-primary">Topic: @currentSession.Topic</span>
                <span class="badge bg-info">Questions: @currentSession.TotalQuestionsAsked</span>
                <span class="badge bg-success">Duration: @FormatDuration(currentSession.Duration)</span>
            </div>
        }
    </div>

    <div class="row">
        <div class="col-lg-8">
            @if (currentSession == null)
            {
                <!-- Topic Selection -->
                <div class="topic-selection-card">
                    <h4><i class="bi bi-list-ul"></i> Choose a Learning Topic</h4>
                    <p>Select a topic you'd like to explore through guided questions and discovery:</p>
                    
                    <div class="topics-grid">
                        @if (availableTopics != null)
                        {
                            @foreach (var topic in availableTopics)
                            {
                                <div class="topic-card @GetTopicCardClass(topic.Difficulty)" @onclick="() => StartSession(topic.Id)">
                                    <div class="topic-header">
                                        <h6>@topic.Name</h6>
                                        <span class="difficulty-badge @GetDifficultyClass(topic.Difficulty)">
                                            @topic.Difficulty
                                        </span>
                                    </div>
                                    <p class="topic-description">@topic.Description</p>
                                    <div class="topic-meta">
                                        <small>
                                            <i class="bi bi-clock"></i> ~@topic.EstimatedTimeMinutes min
                                            <i class="bi bi-question-circle ms-2"></i> @topic.QuestionCount questions
                                        </small>
                                    </div>
                                </div>
                            }
                        }
                    </div>

                    @if (userProgress != null && userProgress.TopicProgress.Any())
                    {
                        <div class="progress-summary mt-4">
                            <h5><i class="bi bi-graph-up"></i> Your Progress</h5>
                            <div class="progress-stats">
                                <div class="stat-item">
                                    <strong>@userProgress.TotalQuestions</strong>
                                    <small>Questions Answered</small>
                                </div>
                                <div class="stat-item">
                                    <strong>@((userProgress.OverallAccuracy * 100).ToString("F1"))%</strong>
                                    <small>Accuracy</small>
                                </div>
                                <div class="stat-item">
                                    <strong>@userProgress.MasteredConcepts.Count</strong>
                                    <small>Concepts Mastered</small>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <!-- Active Socratic Session -->
                <div class="socratic-session-card">
                    @if (currentQuestion != null)
                    {
                        <div class="question-section">
                            <div class="question-header">
                                <h4><i class="bi bi-chat-quote"></i> Question</h4>
                                <div class="question-meta">
                                    <span class="difficulty-indicator @GetDifficultyClass(currentQuestion.Difficulty)">
                                        @currentQuestion.Difficulty
                                    </span>
                                    <span class="question-type">@currentQuestion.Type</span>
                                </div>
                            </div>
                            
                            <div class="question-content">
                                <p class="question-text">@currentQuestion.Text</p>
                            </div>

                            @if (showingHint)
                            {
                                <div class="hint-section">
                                    <div class="alert alert-info">
                                        <i class="bi bi-lightbulb"></i> <strong>Hint:</strong> @currentHint
                                    </div>
                                </div>
                            }
                        </div>

                        <div class="response-section">
                            <div class="form-group">
                                <label for="responseInput" class="form-label">Your Response:</label>
                                <textarea id="responseInput" class="form-control" rows="4" 
                                         @bind="currentResponse" 
                                         placeholder="Take your time to think through this question. There are no wrong answers - this is about exploring ideas together."
                                         disabled="@isProcessingResponse"></textarea>
                            </div>
                            
                            <div class="response-actions">
                                <button class="btn btn-primary" @onclick="SubmitResponse" disabled="@(string.IsNullOrWhiteSpace(currentResponse) || isProcessingResponse)">
                                    @if (isProcessingResponse)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    Submit Response
                                </button>
                                
                                <button class="btn btn-outline-secondary" @onclick="GetHint" disabled="@(hintsUsed >= 3 || isProcessingResponse)">
                                    <i class="bi bi-lightbulb"></i> Hint (@hintsUsed/3)
                                </button>
                                
                                <button class="btn btn-outline-danger" @onclick="EndSession">
                                    <i class="bi bi-stop-circle"></i> End Session
                                </button>
                            </div>
                        </div>
                    }
                    
                    @if (lastResponse != null)
                    {
                        <div class="feedback-section">
                            <h5><i class="bi bi-chat-text"></i> Tutor Response</h5>
                            <div class="feedback-content">
                                <p>@lastResponse.Feedback</p>
                                
                                @if (lastResponse.Analysis.ConceptsIdentified.Any())
                                {
                                    <div class="concepts-identified">
                                        <small><strong>Key concepts you mentioned:</strong> 
                                        @string.Join(", ", lastResponse.Analysis.ConceptsIdentified)</small>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
        
        <div class="col-lg-4">
            <div class="sidebar">
                @if (currentSession != null)
                {
                    <!-- Session Progress -->
                    <div class="progress-panel">
                        <h5><i class="bi bi-graph-up"></i> Session Progress</h5>
                        <div class="session-stats">
                            <div class="stat">
                                <span class="stat-value">@currentSession.Questions.Count</span>
                                <span class="stat-label">Questions Explored</span>
                            </div>
                            <div class="stat">
                                <span class="stat-value">@FormatDuration(currentSession.Duration)</span>
                                <span class="stat-label">Learning Time</span>
                            </div>
                        </div>
                        
                        @if (currentQuestion != null && currentQuestion.KeyConcepts.Any())
                        {
                            <div class="key-concepts">
                                <h6>Key Concepts:</h6>
                                <div class="concept-tags">
                                    @foreach (var concept in currentQuestion.KeyConcepts)
                                    {
                                        <span class="concept-tag">@concept</span>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                    
                    <!-- Previous Questions -->
                    @if (currentSession.Questions.Count > 1)
                    {
                        <div class="previous-questions">
                            <h6><i class="bi bi-clock-history"></i> Previous Questions</h6>
                            <div class="question-history">
                                @foreach (var question in currentSession.Questions.Take(currentSession.Questions.Count - 1).Reverse().Take(3))
                                {
                                    <div class="history-item">
                                        <small>@TruncateText(question.Text, 60)</small>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                }
                else
                {
                    <!-- Learning Tips -->
                    <div class="learning-tips">
                        <h5><i class="bi bi-info-circle"></i> About Socratic Learning</h5>
                        <div class="tip-cards">
                            <div class="tip-card">
                                <h6>Think Deeply</h6>
                                <p>Take time to really consider each question. There are no wrong answers.</p>
                            </div>
                            <div class="tip-card">
                                <h6>Be Curious</h6>
                                <p>Ask yourself "why" and "how" as you think through problems.</p>
                            </div>
                            <div class="tip-card">
                                <h6>Learn Together</h6>
                                <p>The tutor learns from your responses to provide better guidance.</p>
                            </div>
                        </div>
                        
                        <div class="mt-4 text-center">
                            <h6>Prefer Step-by-Step Learning?</h6>
                            <a href="/tutorial" class="btn btn-outline-primary btn-sm">
                                <i class="bi bi-mortarboard"></i> Try Interactive Tutorial
                            </a>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@if (showLoadingOverlay)
{
    <div class="loading-overlay">
        <div class="loading-content">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>@loadingMessage</p>
        </div>
    </div>
}

<style>
.socratic-tutor-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

.tutor-header {
    text-align: center;
    margin-bottom: 30px;
    padding: 20px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-radius: 12px;
}

.tutor-header h2 {
    margin-bottom: 10px;
}

.session-info {
    margin-top: 15px;
}

.session-info .badge {
    margin: 0 5px;
    font-size: 0.9rem;
}

.topic-selection-card {
    background: white;
    border-radius: 12px;
    padding: 30px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.topics-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    margin: 20px 0;
}

.topic-card {
    border: 2px solid #e9ecef;
    border-radius: 8px;
    padding: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
    background: white;
}

.topic-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
}

.topic-card.beginner {
    border-left: 4px solid #28a745;
}

.topic-card.intermediate {
    border-left: 4px solid #ffc107;
}

.topic-card.advanced {
    border-left: 4px solid #dc3545;
}

.topic-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

.difficulty-badge {
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: bold;
}

.difficulty-badge.beginner {
    background-color: #d4edda;
    color: #155724;
}

.difficulty-badge.intermediate {
    background-color: #fff3cd;
    color: #856404;
}

.difficulty-badge.advanced {
    background-color: #f8d7da;
    color: #721c24;
}

.topic-description {
    color: #6c757d;
    margin-bottom: 15px;
}

.topic-meta {
    color: #6c757d;
    font-size: 0.9rem;
}

.topic-meta i {
    margin-right: 4px;
}

.progress-summary {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 20px;
}

.progress-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 20px;
    margin-top: 15px;
}

.stat-item {
    text-align: center;
    padding: 15px;
    background: white;
    border-radius: 8px;
    border: 1px solid #e9ecef;
}

.stat-item strong {
    display: block;
    font-size: 1.5rem;
    color: #495057;
}

.stat-item small {
    color: #6c757d;
}

.socratic-session-card {
    background: white;
    border-radius: 12px;
    padding: 30px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.question-section {
    margin-bottom: 30px;
}

.question-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    border-bottom: 2px solid #e9ecef;
    padding-bottom: 10px;
}

.question-meta {
    display: flex;
    gap: 10px;
    align-items: center;
}

.difficulty-indicator {
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: bold;
}

.question-type {
    background: #e9ecef;
    color: #495057;
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 0.75rem;
}

.question-content {
    background: #f8f9fa;
    border-left: 4px solid #007bff;
    padding: 20px;
    border-radius: 0 8px 8px 0;
    margin-bottom: 20px;
}

.question-text {
    font-size: 1.1rem;
    line-height: 1.6;
    margin: 0;
    color: #495057;
}

.hint-section {
    margin: 20px 0;
}

.response-section {
    margin-bottom: 30px;
}

.form-label {
    font-weight: 600;
    color: #495057;
}

.form-control {
    border: 2px solid #e9ecef;
    border-radius: 8px;
    padding: 12px;
    font-size: 1rem;
    transition: border-color 0.3s ease;
}

.form-control:focus {
    border-color: #007bff;
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

.response-actions {
    display: flex;
    gap: 10px;
    margin-top: 15px;
    flex-wrap: wrap;
}

.feedback-section {
    background: #e8f4f8;
    border-radius: 8px;
    padding: 20px;
    border-left: 4px solid #17a2b8;
}

.feedback-content p {
    margin-bottom: 10px;
    font-size: 1.05rem;
    line-height: 1.6;
}

.concepts-identified {
    padding: 10px;
    background: rgba(255, 255, 255, 0.7);
    border-radius: 4px;
    margin-top: 10px;
}

.sidebar {
    position: sticky;
    top: 20px;
}

.progress-panel {
    background: white;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
}

.session-stats {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px;
    margin: 15px 0;
}

.stat {
    text-align: center;
    padding: 15px;
    background: #f8f9fa;
    border-radius: 8px;
}

.stat-value {
    display: block;
    font-size: 1.3rem;
    font-weight: bold;
    color: #495057;
}

.stat-label {
    color: #6c757d;
    font-size: 0.9rem;
}

.key-concepts {
    margin-top: 20px;
}

.concept-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-top: 10px;
}

.concept-tag {
    background: #e7f3ff;
    color: #0066cc;
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 0.8rem;
    border: 1px solid #b3d9ff;
}

.previous-questions {
    background: white;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.question-history {
    margin-top: 10px;
}

.history-item {
    padding: 8px 12px;
    background: #f8f9fa;
    border-radius: 4px;
    margin-bottom: 8px;
    border-left: 3px solid #dee2e6;
}

.learning-tips {
    background: white;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.tip-cards {
    margin-top: 15px;
}

.tip-card {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 15px;
    border-left: 4px solid #007bff;
}

.tip-card h6 {
    color: #495057;
    margin-bottom: 8px;
}

.tip-card p {
    margin: 0;
    color: #6c757d;
    font-size: 0.9rem;
}

.loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
}

.loading-content {
    background: white;
    padding: 30px;
    border-radius: 12px;
    text-align: center;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
}

.loading-content p {
    margin-top: 15px;
    color: #495057;
}

@@media (max-width: 768px) {
    .topics-grid {
        grid-template-columns: 1fr;
    }
    
    .response-actions {
        flex-direction: column;
    }
    
    .response-actions > * {
        width: 100%;
    }
    
    .session-stats {
        grid-template-columns: 1fr;
    }
    
    .question-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
    }
}
</style>

@code {
    private List<SocraticTopic>? availableTopics;
    private UserLearningProgress? userProgress;
    private SocraticSession? currentSession;
    private SocraticQuestion? currentQuestion;
    private SocraticQuestionResponse? lastResponse;
    
    private string currentResponse = "";
    private string currentHint = "";
    private bool showingHint = false;
    private int hintsUsed = 0;
    private bool isProcessingResponse = false;
    private bool showLoadingOverlay = false;
    private string loadingMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            showLoadingOverlay = true;
            loadingMessage = "Initializing Socratic Tutor...";
            
            availableTopics = await TutorService.GetAvailableTopicsAsync();
            userProgress = await TutorService.GetProgressAsync("demo_user"); // In real app, get from auth
        }
        catch (Exception ex)
        {
            // Log error and show user-friendly message
            Console.WriteLine($"Error initializing Socratic Tutor: {ex.Message}");
        }
        finally
        {
            showLoadingOverlay = false;
            StateHasChanged();
        }
    }

    private async Task StartSession(string topicId)
    {
        try
        {
            showLoadingOverlay = true;
            loadingMessage = "Starting your learning session...";
            
            currentSession = await TutorService.StartSessionAsync("demo_user", topicId);
            currentQuestion = currentSession.Questions.LastOrDefault();
            currentResponse = "";
            lastResponse = null;
            hintsUsed = 0;
            showingHint = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting session: {ex.Message}");
        }
        finally
        {
            showLoadingOverlay = false;
            StateHasChanged();
        }
    }

    private async Task SubmitResponse()
    {
        if (string.IsNullOrWhiteSpace(currentResponse) || currentSession == null) return;

        try
        {
            isProcessingResponse = true;
            
            lastResponse = await TutorService.SubmitResponseAsync(currentSession.Id, currentResponse.Trim());
            
            // Update session with new question
            if (lastResponse.NextQuestion != null)
            {
                currentSession.Questions.Add(lastResponse.NextQuestion);
                currentQuestion = lastResponse.NextQuestion;
                currentSession.TotalQuestionsAsked++;
            }
            
            // Reset for next question
            currentResponse = "";
            hintsUsed = 0;
            showingHint = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error submitting response: {ex.Message}");
        }
        finally
        {
            isProcessingResponse = false;
            StateHasChanged();
        }
    }

    private async Task GetHint()
    {
        if (currentSession == null || hintsUsed >= 3) return;

        try
        {
            currentHint = await TutorService.GetHintAsync(currentSession.Id, hintsUsed + 1);
            hintsUsed++;
            showingHint = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting hint: {ex.Message}");
            currentHint = "Sorry, I couldn't provide a hint at this time.";
            showingHint = true;
        }
        
        StateHasChanged();
    }

    private void EndSession()
    {
        if (currentSession != null)
        {
            currentSession.IsActive = false;
            currentSession.EndTime = DateTime.UtcNow;
        }
        
        currentSession = null;
        currentQuestion = null;
        lastResponse = null;
        currentResponse = "";
        hintsUsed = 0;
        showingHint = false;
        
        StateHasChanged();
    }

    private string GetTopicCardClass(DifficultyLevel difficulty) =>
        difficulty.ToString().ToLower();

    private string GetDifficultyClass(DifficultyLevel difficulty) =>
        $"difficulty-badge {difficulty.ToString().ToLower()}";

    private string FormatDuration(TimeSpan duration) =>
        duration.TotalMinutes < 60 
            ? $"{duration.TotalMinutes:F0}m" 
            : $"{duration.TotalHours:F0}h {duration.Minutes}m";

    private string TruncateText(string text, int maxLength) =>
        text.Length <= maxLength ? text : text[..maxLength] + "...";
}