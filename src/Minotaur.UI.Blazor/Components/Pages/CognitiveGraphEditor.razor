@page "/cognitive-graph-editor"
@using Minotaur.Core
@using Minotaur.Editor
@using System.Text.Json
@inject IJSRuntime JSRuntime

<PageTitle>Cognitive Graph Editor</PageTitle>

<div class="cognitive-graph-editor">
    <div class="editor-header">
        <h3><i class="bi bi-diagram-3"></i> Cognitive Graph Editor</h3>
        <div class="header-controls">
            <button class="btn btn-primary" @onclick="CreateNewGraph">
                <i class="bi bi-file-plus"></i> New Graph
            </button>
            <button class="btn btn-success" @onclick="SaveGraph" disabled="@(graphEditor == null)">
                <i class="bi bi-save"></i> Save Graph
            </button>
            <button class="btn btn-info" @onclick="LoadSampleGraph">
                <i class="bi bi-file-code"></i> Load Sample
            </button>
            <button class="btn btn-outline-secondary" @onclick="ExportToJson" disabled="@(graphEditor == null)">
                <i class="bi bi-download"></i> Export JSON
            </button>
        </div>
    </div>

    <div class="editor-layout">
        <div class="graph-toolbar">
            <div class="toolbar-section">
                <h5><i class="bi bi-tools"></i> Graph Operations</h5>
                <div class="btn-group-vertical w-100 mb-2">
                    <button class="btn btn-sm btn-success" @onclick="AddTerminalNode" disabled="@(!isEditMode)">
                        <i class="bi bi-plus-circle"></i> Add Terminal
                    </button>
                    <button class="btn btn-sm btn-info" @onclick="AddNonTerminalNode" disabled="@(!isEditMode)">
                        <i class="bi bi-plus-circle"></i> Add Non-Terminal
                    </button>
                    <button class="btn btn-sm btn-warning" @onclick="AddIdentifierNode" disabled="@(!isEditMode)">
                        <i class="bi bi-plus-circle"></i> Add Identifier
                    </button>
                    <button class="btn btn-sm btn-secondary" @onclick="AddLiteralNode" disabled="@(!isEditMode)">
                        <i class="bi bi-plus-circle"></i> Add Literal
                    </button>
                </div>
                
                <div class="btn-group w-100 mb-2">
                    <button class="btn btn-sm btn-outline-secondary" @onclick="UndoLastOperation" disabled="@(!canUndo)">
                        <i class="bi bi-arrow-counterclockwise"></i> Undo
                    </button>
                    <button class="btn btn-sm btn-outline-secondary" @onclick="RedoLastOperation" disabled="@(!canRedo)">
                        <i class="bi bi-arrow-clockwise"></i> Redo
                    </button>
                </div>
                
                <button class="btn btn-sm btn-danger w-100" @onclick="DeleteSelectedNode" disabled="@(selectedNodeId == null || !isEditMode)">
                    <i class="bi bi-trash"></i> Delete Selected
                </button>
            </div>
            
            <div class="toolbar-section">
                <h5><i class="bi bi-toggles"></i> Edit Mode</h5>
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" @bind="isEditMode" id="editModeSwitch">
                    <label class="form-check-label" for="editModeSwitch">
                        @(isEditMode ? "‚úèÔ∏è Edit Mode" : "üîí View Mode")
                    </label>
                </div>
                
                @if (graphEditor != null)
                {
                    <div class="mt-3">
                        <h6>Graph Stats</h6>
                        <div class="stats-grid">
                            <div class="stats-item">
                                <span class="badge bg-primary">@nodeCount</span>
                                <small>Nodes</small>
                            </div>
                            <div class="stats-item">
                                <span class="badge bg-info">@(canUndo ? "Yes" : "No")</span>
                                <small>Undo Available</small>
                            </div>
                        </div>
                    </div>
                }
            </div>
            
            @if (selectedNode != null)
            {
                <div class="toolbar-section">
                    <h5><i class="bi bi-gear"></i> Node Properties</h5>
                    <div class="node-properties">
                        <div class="mb-2">
                            <label class="form-label">Node Type:</label>
                            <input @bind="selectedNode.NodeType" class="form-control form-control-sm" disabled="@(!isEditMode)" />
                        </div>
                        
                        <div class="mb-2">
                            <label class="form-label">Node ID:</label>
                            <div class="input-group input-group-sm">
                                <input value="@selectedNode.Id.ToString()[..8]..." readonly class="form-control" />
                                <button class="btn btn-outline-secondary" type="button" @onclick="() => CopyToClipboard(selectedNode.Id.ToString())">
                                    <i class="bi bi-clipboard"></i>
                                </button>
                            </div>
                        </div>
                        
                        @if (selectedNode is NonTerminalNode ntNode)
                        {
                            <div class="mb-2">
                                <label class="form-label">Children:</label>
                                <span class="badge bg-info">@ntNode.Children.Count</span>
                            </div>
                            <div class="mb-2">
                                <label class="form-label">Rule Name:</label>
                                <input @bind="ntNode.RuleName" class="form-control form-control-sm" disabled="@(!isEditMode)" />
                            </div>
                        }
                        
                        @if (selectedNode is TerminalNode tNode)
                        {
                            <div class="mb-2">
                                <label class="form-label">Text:</label>
                                <input @bind="tNode.Text" class="form-control form-control-sm" disabled="@(!isEditMode)" />
                            </div>
                            <div class="mb-2">
                                <label class="form-label">Token Type:</label>
                                <input @bind="tNode.TokenType" class="form-control form-control-sm" disabled="@(!isEditMode)" />
                            </div>
                        }
                        
                        @if (selectedNode is IdentifierNode idNode)
                        {
                            <div class="mb-2">
                                <label class="form-label">Text:</label>
                                <input @bind="idNode.Text" class="form-control form-control-sm" disabled="@(!isEditMode)" />
                            </div>
                            <div class="mb-2">
                                <label class="form-label">Namespace:</label>
                                <input @bind="idNode.Namespace" class="form-control form-control-sm" disabled="@(!isEditMode)" />
                            </div>
                        }
                        
                        @if (selectedNode is LiteralNode litNode)
                        {
                            <div class="mb-2">
                                <label class="form-label">Value:</label>
                                <input @bind="litNode.Value" class="form-control form-control-sm" disabled="@(!isEditMode)" />
                            </div>
                            <div class="mb-2">
                                <label class="form-label">Literal Type:</label>
                                <select @bind="litNode.LiteralType" class="form-select form-select-sm" disabled="@(!isEditMode)">
                                    <option value="String">String</option>
                                    <option value="Number">Number</option>
                                    <option value="Boolean">Boolean</option>
                                    <option value="Null">Null</option>
                                </select>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>

        <div class="graph-visualization">
            @if (graphEditor == null)
            {
                <div class="loading-state">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Initializing GraphEditor...</span>
                    </div>
                    <p class="mt-2">Initializing GraphEditor with Minotaur.Core integration...</p>
                </div>
            }
            else if (nodeCount == 0)
            {
                <div class="empty-state">
                    <div class="empty-content">
                        <i class="bi bi-diagram-3 empty-icon"></i>
                        <h4>No Nodes in Graph</h4>
                        <p>Start by adding nodes using the toolbar, or load a sample graph to get started.</p>
                        <button class="btn btn-primary" @onclick="LoadSampleGraph">
                            <i class="bi bi-file-code"></i> Load Sample Graph
                        </button>
                    </div>
                </div>
            }
            else
            {
                <div class="graph-canvas" id="graph-canvas">
                    <svg width="100%" height="100%" viewBox="0 0 800 600" class="graph-svg">
                        <!-- Background grid -->
                        <defs>
                            <pattern id="grid" width="20" height="20" patternUnits="userSpaceOnUse">
                                <path d="M 20 0 L 0 0 0 20" fill="none" stroke="#e0e0e0" stroke-width="0.5"/>
                            </pattern>
                        </defs>
                        <rect width="100%" height="100%" fill="url(#grid)" />
                        
                        <!-- Render nodes -->
                        @if (graphEditor != null && nodePositions.Any())
                        {
                            @foreach (var kvp in nodePositions)
                            {
                                var node = nodes.FirstOrDefault(n => n.Id == kvp.Key);
                                if (node != null)
                                {
                                    var pos = kvp.Value;
                                    var isSelected = selectedNodeId == node.Id;
                                    var nodeClass = GetNodeClass(node);
                                    var nodeColor = GetNodeColor(node);
                                    
                                    <g class="graph-node @nodeClass @(isSelected ? "selected" : "")" 
                                       transform="translate(@pos.X, @pos.Y)"
                                       @onclick="() => SelectNode(node)">
                                        
                                        <rect x="-40" y="-20" width="80" height="40" 
                                              fill="@nodeColor" 
                                              stroke="@(isSelected ? "#007bff" : "#666")" 
                                              stroke-width="@(isSelected ? 3 : 1)"
                                              rx="5" />
                                        
                                        <text x="0" y="0" text-anchor="middle" dominant-baseline="middle" 
                                              fill="white" font-size="12" font-weight="bold">
                                            @GetNodeDisplayText(node)
                                        </text>
                                        
                                        @if (isSelected)
                                        {
                                            <circle cx="45" cy="-25" r="8" fill="#dc3545" class="delete-handle"
                                                   @onclick="() => DeleteNode(node)" @onclick:stopPropagation="true">
                                            </circle>
                                            @((MarkupString)"<text x=\"45\" y=\"-25\" text-anchor=\"middle\" dominant-baseline=\"middle\" fill=\"white\" font-size=\"10\">√ó</text>")
                                        }
                                    </g>
                                }
                            }
                            
                            <!-- Render connections -->
                            @foreach (var connection in connections)
                            {
                                var fromPos = nodePositions.GetValueOrDefault(connection.FromId);
                                var toPos = nodePositions.GetValueOrDefault(connection.ToId);
                                
                                if (fromPos != default && toPos != default)
                                {
                                    <line x1="@fromPos.X" y1="@fromPos.Y" x2="@toPos.X" y2="@toPos.Y" 
                                          stroke="#666" stroke-width="2" marker-end="url(#arrowhead)" />
                                }
                            }
                            
                            <!-- Arrow marker definition -->
                            <defs>
                                <marker id="arrowhead" markerWidth="10" markerHeight="7" 
                                        refX="9" refY="3.5" orient="auto">
                                    <polygon points="0 0, 10 3.5, 0 7" fill="#666" />
                                </marker>
                            </defs>
                        }
                    </svg>
                </div>
            }
        </div>
    </div>
    
    @if (statusMessage != null)
    {
        <div class="alert alert-info alert-dismissible fade show mt-3" role="alert">
            <i class="bi bi-info-circle"></i> @statusMessage
            <button type="button" class="btn-close" @onclick="() => statusMessage = null"></button>
        </div>
    }
    
    @if (errorMessage != null)
    {
        <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
            <i class="bi bi-exclamation-triangle"></i> @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
        </div>
    }
</div>

@code {
    private GraphEditor? graphEditor;
    private List<CognitiveGraphNode> nodes = new();
    private Dictionary<Guid, (double X, double Y)> nodePositions = new();
    private List<(Guid FromId, Guid ToId)> connections = new();
    private CognitiveGraphNode? selectedNode;
    private Guid? selectedNodeId;
    private bool isEditMode = true;
    private bool canUndo = false;
    private bool canRedo = false;
    private int nodeCount = 0;
    private string? statusMessage;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            graphEditor = new GraphEditor();
            await LoadSampleGraph();
            statusMessage = "GraphEditor initialized successfully with Minotaur.Core integration.";
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to initialize GraphEditor: {ex.Message}";
        }
    }

    private async Task CreateNewGraph()
    {
        try
        {
            graphEditor?.Dispose();
            graphEditor = new GraphEditor();
            nodes.Clear();
            nodePositions.Clear();
            connections.Clear();
            selectedNode = null;
            selectedNodeId = null;
            canUndo = false;
            canRedo = false;
            nodeCount = 0;
            statusMessage = "New graph created successfully.";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to create new graph: {ex.Message}";
        }
    }

    private async Task LoadSampleGraph()
    {
        try
        {
            if (graphEditor == null) return;

            // Create sample nodes using the real Minotaur.Core classes
            var rootNode = new NonTerminalNode 
            { 
                NodeType = "Root", 
                RuleName = "Program" 
            };
            
            var methodNode = new NonTerminalNode 
            { 
                NodeType = "MethodDeclaration", 
                RuleName = "Method" 
            };
            
            var identifierNode = new IdentifierNode 
            { 
                NodeType = "Identifier", 
                Text = "MainMethod",
                Namespace = "Global"
            };
            
            var literalNode = new LiteralNode 
            { 
                NodeType = "StringLiteral", 
                Value = "Hello, World!",
                LiteralType = "String"
            };
            
            var terminalNode = new TerminalNode 
            { 
                NodeType = "Keyword", 
                Text = "public",
                TokenType = "Keyword"
            };

            // Add nodes to our tracking collections
            nodes = new List<CognitiveGraphNode> { rootNode, methodNode, identifierNode, literalNode, terminalNode };
            
            // Set up node positions for visualization
            nodePositions = new Dictionary<Guid, (double X, double Y)>
            {
                { rootNode.Id, (400, 100) },
                { methodNode.Id, (400, 200) },
                { identifierNode.Id, (250, 300) },
                { literalNode.Id, (400, 300) },
                { terminalNode.Id, (550, 300) }
            };
            
            // Set up connections
            connections = new List<(Guid FromId, Guid ToId)>
            {
                (rootNode.Id, methodNode.Id),
                (methodNode.Id, identifierNode.Id),
                (methodNode.Id, literalNode.Id),
                (methodNode.Id, terminalNode.Id)
            };
            
            // Add children relationships
            methodNode.AddChild(identifierNode);
            methodNode.AddChild(literalNode);
            methodNode.AddChild(terminalNode);
            rootNode.AddChild(methodNode);

            nodeCount = nodes.Count;
            statusMessage = "Sample graph loaded with cognitive graph structure.";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load sample graph: {ex.Message}";
        }
    }

    private async Task AddTerminalNode()
    {
        await AddNode(new TerminalNode { NodeType = "Terminal", Text = "NewTerminal", TokenType = "Unknown" });
    }

    private async Task AddNonTerminalNode()
    {
        await AddNode(new NonTerminalNode { NodeType = "NonTerminal", RuleName = "NewRule" });
    }

    private async Task AddIdentifierNode()
    {
        await AddNode(new IdentifierNode { NodeType = "Identifier", Text = "NewIdentifier", Namespace = "Local" });
    }

    private async Task AddLiteralNode()
    {
        await AddNode(new LiteralNode { NodeType = "Literal", Value = "NewValue", LiteralType = "String" });
    }

    private async Task AddNode(CognitiveGraphNode node)
    {
        try
        {
            if (graphEditor == null) return;

            nodes.Add(node);
            
            // Position new node
            var x = 100 + (nodes.Count % 5) * 150;
            var y = 100 + (nodes.Count / 5) * 100;
            nodePositions[node.Id] = (x, y);
            
            nodeCount = nodes.Count;
            canUndo = true;
            statusMessage = $"Added new {node.GetType().Name} node.";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to add node: {ex.Message}";
        }
    }

    private async Task DeleteSelectedNode()
    {
        if (selectedNode == null) return;
        await DeleteNode(selectedNode);
    }

    private async Task DeleteNode(CognitiveGraphNode node)
    {
        try
        {
            if (graphEditor == null) return;

            nodes.Remove(node);
            nodePositions.Remove(node.Id);
            connections.RemoveAll(c => c.FromId == node.Id || c.ToId == node.Id);
            
            if (selectedNode?.Id == node.Id)
            {
                selectedNode = null;
                selectedNodeId = null;
            }
            
            nodeCount = nodes.Count;
            canUndo = true;
            statusMessage = $"Deleted {node.GetType().Name} node.";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to delete node: {ex.Message}";
        }
    }

    private void SelectNode(CognitiveGraphNode node)
    {
        selectedNode = node;
        selectedNodeId = node.Id;
        StateHasChanged();
    }

    private async Task UndoLastOperation()
    {
        try
        {
            if (graphEditor?.CanUndo == true)
            {
                graphEditor.Undo();
                canUndo = graphEditor.CanUndo;
                canRedo = graphEditor.CanRedo;
                statusMessage = "Undo operation completed.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Undo failed: {ex.Message}";
        }
    }

    private async Task RedoLastOperation()
    {
        try
        {
            if (graphEditor?.CanRedo == true)
            {
                graphEditor.Redo();
                canUndo = graphEditor.CanUndo;
                canRedo = graphEditor.CanRedo;
                statusMessage = "Redo operation completed.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Redo failed: {ex.Message}";
        }
    }

    private async Task SaveGraph()
    {
        try
        {
            if (graphEditor == null) return;
            
            var graphData = new
            {
                Nodes = nodes.Select(n => new
                {
                    n.Id,
                    n.NodeType,
                    Type = n.GetType().Name,
                    Position = nodePositions.GetValueOrDefault(n.Id),
                    Properties = GetNodeProperties(n)
                }),
                Connections = connections
            };
            
            var json = JsonSerializer.Serialize(graphData, new JsonSerializerOptions { WriteIndented = true });
            await JSRuntime.InvokeVoidAsync("downloadFile", "cognitive-graph.json", json, "application/json");
            statusMessage = "Graph exported successfully.";
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to save graph: {ex.Message}";
        }
    }

    private async Task ExportToJson()
    {
        await SaveGraph();
    }

    private async Task CopyToClipboard(string text)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
            statusMessage = "Copied to clipboard.";
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to copy to clipboard: {ex.Message}";
        }
    }

    private string GetNodeClass(CognitiveGraphNode node)
    {
        return node.GetType().Name switch
        {
            nameof(IdentifierNode) => "identifier-node",
            nameof(LiteralNode) => "literal-node",
            nameof(TerminalNode) => "terminal-node",
            nameof(NonTerminalNode) => "nonterminal-node", 
            _ => "unknown-node"
        };
    }

    private string GetNodeColor(CognitiveGraphNode node)
    {
        return node.GetType().Name switch
        {
            nameof(IdentifierNode) => "#ffc107", 
            nameof(LiteralNode) => "#6c757d",
            nameof(TerminalNode) => "#28a745",
            nameof(NonTerminalNode) => "#17a2b8",
            _ => "#343a40"
        };
    }

    private string GetNodeDisplayText(CognitiveGraphNode node)
    {
        return node switch
        {
            IdentifierNode id => (id.Text?.Length > 8 ? id.Text[..8] + "..." : id.Text) ?? "ID",
            LiteralNode lit => (lit.Value?.ToString()?.Length > 8 ? lit.Value.ToString()?[..8] + "..." : lit.Value?.ToString()) ?? "Lit",
            TerminalNode t => t.Text?.Length > 8 ? t.Text[..8] + "..." : t.Text ?? "Term",
            NonTerminalNode nt => nt.RuleName?.Length > 8 ? nt.RuleName[..8] + "..." : nt.RuleName ?? "Rule",
            _ => "Node"
        };
    }

    private object GetNodeProperties(CognitiveGraphNode node)
    {
        return node switch
        {
            IdentifierNode id => new { id.Text, id.Namespace },
            LiteralNode lit => new { Value = lit.Value?.ToString() ?? "", lit.LiteralType },
            TerminalNode t => new { t.Text, t.TokenType },
            NonTerminalNode nt => new { nt.RuleName, ChildCount = nt.Children.Count },
            _ => new { }
        };
    }

    public void Dispose()
    {
        graphEditor?.Dispose();
    }
}