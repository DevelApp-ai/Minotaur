@page "/tutorial"
@using Minotaur.Core
@using Minotaur.Editor
@inject IJSRuntime JSRuntime

<PageTitle>Interactive Tutorial - Minotaur Grammar Tool</PageTitle>

<div class="tutorial-container">
    <div class="tutorial-header">
        <h2><i class="bi bi-mortarboard"></i> Interactive Tutorial</h2>
        <div class="tutorial-progress">
            <div class="progress">
                <div class="progress-bar" role="progressbar" 
                     style="width: @(((double)currentStep / totalSteps) * 100)%" 
                     aria-valuenow="@currentStep" aria-valuemin="0" aria-valuemax="@totalSteps">
                    Step @currentStep of @totalSteps
                </div>
            </div>
        </div>
    </div>

    <div class="tutorial-content">
        <div class="row">
            <div class="col-md-8">
                <div class="tutorial-step-card">
                    @switch (currentStep)
                    {
                        case 1:
                            <div class="step-content">
                                <h3><i class="bi bi-play-circle"></i> Welcome to Minotaur</h3>
                                <p class="lead">Minotaur is a powerful grammar development tool that helps you create, analyze, and manage complex language grammars using cognitive graph structures.</p>
                                
                                <div class="feature-highlights">
                                    <div class="feature-card">
                                        <i class="bi bi-diagram-3 feature-icon text-primary"></i>
                                        <h5>Cognitive Graph Editor</h5>
                                        <p>Visual editor for creating and manipulating language structures.</p>
                                    </div>
                                    <div class="feature-card">
                                        <i class="bi bi-cpu feature-icon text-success"></i>
                                        <h5>StepParser Integration</h5>
                                        <p>Advanced parsing capabilities with DevelApp.StepParser.</p>
                                    </div>
                                    <div class="feature-card">
                                        <i class="bi bi-graph-up-arrow feature-icon text-warning"></i>
                                        <h5>Symbolic Analysis</h5>
                                        <p>Deep analysis of grammar structures and execution paths.</p>
                                    </div>
                                </div>
                            </div>
                            break;

                        case 2:
                            <div class="step-content">
                                <h3><i class="bi bi-diagram-3"></i> Cognitive Graph Editor</h3>
                                <p>The Cognitive Graph Editor is the heart of Minotaur. It allows you to create visual representations of language structures.</p>
                                
                                <div class="demo-section">
                                    <h5>Key Features:</h5>
                                    <ul class="feature-list">
                                        <li><strong>Visual Node Creation:</strong> Add different types of nodes (Terminal, Non-Terminal, Identifier, Literal)</li>
                                        <li><strong>Interactive Editing:</strong> Drag, drop, and connect nodes to build grammar structures</li>
                                        <li><strong>Real-time Validation:</strong> Immediate feedback on grammar correctness</li>
                                        <li><strong>Export Capabilities:</strong> Save your work in various formats</li>
                                    </ul>
                                    
                                    <div class="interactive-demo" id="graph-demo-@currentStep">
                                        <svg width="100%" height="200" viewBox="0 0 600 200" class="demo-svg">
                                            <defs>
                                                <pattern id="demo-grid" width="20" height="20" patternUnits="userSpaceOnUse">
                                                    <path d="M 20 0 L 0 0 0 20" fill="none" stroke="#e0e0e0" stroke-width="0.5"/>
                                                </pattern>
                                            </defs>
                                            <rect width="100%" height="100%" fill="url(#demo-grid)" />
                                            
                                            <!-- Demo nodes -->
                                            <g class="demo-node" transform="translate(150, 100)">
                                                <rect x="-40" y="-20" width="80" height="40" fill="#17a2b8" stroke="#666" rx="5" />
                                                <text x="0" y="0" text-anchor="middle" dominant-baseline="middle" fill="white" font-size="12">Program</text>
                                            </g>
                                            
                                            <g class="demo-node" transform="translate(300, 100)">
                                                <rect x="-40" y="-20" width="80" height="40" fill="#28a745" stroke="#666" rx="5" />
                                                <text x="0" y="0" text-anchor="middle" dominant-baseline="middle" fill="white" font-size="12">public</text>
                                            </g>
                                            
                                            <g class="demo-node" transform="translate(450, 100)">
                                                <rect x="-40" y="-20" width="80" height="40" fill="#ffc107" stroke="#666" rx="5" />
                                                <text x="0" y="0" text-anchor="middle" dominant-baseline="middle" fill="black" font-size="12">method</text>
                                            </g>
                                            
                                            <!-- Connection lines -->
                                            <line x1="190" y1="100" x2="260" y2="100" stroke="#666" stroke-width="2" marker-end="url(#demo-arrow)" />
                                            <line x1="340" y1="100" x2="410" y2="100" stroke="#666" stroke-width="2" marker-end="url(#demo-arrow)" />
                                            
                                            <defs>
                                                <marker id="demo-arrow" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
                                                    <polygon points="0 0, 10 3.5, 0 7" fill="#666" />
                                                </marker>
                                            </defs>
                                        </svg>
                                    </div>
                                </div>
                            </div>
                            break;

                        case 3:
                            <div class="step-content">
                                <h3><i class="bi bi-cpu"></i> StepParser Integration</h3>
                                <p>The StepParser Integration panel provides powerful parsing capabilities using the DevelApp.StepParser engine.</p>
                                
                                <div class="demo-section">
                                    <h5>What you can do:</h5>
                                    <ul class="feature-list">
                                        <li><strong>Parse Source Code:</strong> Convert text into cognitive graph structures</li>
                                        <li><strong>Multi-language Support:</strong> Handle C#, JavaScript, Python, and more</li>
                                        <li><strong>Validation:</strong> Check syntax and structure validity</li>
                                        <li><strong>Error Reporting:</strong> Get detailed information about parsing issues</li>
                                    </ul>
                                    
                                    <div class="code-example">
                                        <h6>Example Input:</h6>
                                        <pre><code class="language-csharp">public void HelloWorld() {
    Console.WriteLine("Hello, World!");
}</code></pre>
                                        
                                        <div class="arrow-down">
                                            <i class="bi bi-arrow-down-circle text-primary"></i>
                                        </div>
                                        
                                        <h6>Parsed Structure:</h6>
                                        <div class="parsed-result">
                                            <div class="node-hierarchy">
                                                <div class="hierarchy-item root">CompilationUnit</div>
                                                <div class="hierarchy-item level-1">└─ MethodDeclaration</div>
                                                <div class="hierarchy-item level-2">├─ Modifier: public</div>
                                                <div class="hierarchy-item level-2">├─ Identifier: HelloWorld</div>
                                                <div class="hierarchy-item level-2">└─ Block</div>
                                                <div class="hierarchy-item level-3">└─ ExpressionStatement</div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            break;

                        case 4:
                            <div class="step-content">
                                <h3><i class="bi bi-graph-up-arrow"></i> Symbolic Analysis</h3>
                                <p>The Symbolic Analysis panel helps you understand execution paths and constraints in your grammar structures.</p>
                                
                                <div class="demo-section">
                                    <h5>Analysis Features:</h5>
                                    <ul class="feature-list">
                                        <li><strong>Execution Path Visualization:</strong> See how your grammar processes input</li>
                                        <li><strong>Constraint Analysis:</strong> Identify limitations and dependencies</li>
                                        <li><strong>Performance Insights:</strong> Optimize grammar performance</li>
                                        <li><strong>Graphical Representation:</strong> Visual DAG of execution flows</li>
                                    </ul>
                                    
                                    <div class="analysis-demo">
                                        <h6>Sample Analysis Results:</h6>
                                        <div class="analysis-results">
                                            <div class="result-card success">
                                                <i class="bi bi-check-circle"></i>
                                                <div>
                                                    <strong>Paths Analyzed:</strong> 15<br>
                                                    <small>All execution paths validated successfully</small>
                                                </div>
                                            </div>
                                            <div class="result-card warning">
                                                <i class="bi bi-exclamation-triangle"></i>
                                                <div>
                                                    <strong>Potential Issues:</strong> 2<br>
                                                    <small>Performance bottlenecks detected</small>
                                                </div>
                                            </div>
                                            <div class="result-card info">
                                                <i class="bi bi-info-circle"></i>
                                                <div>
                                                    <strong>Constraints:</strong> 8<br>
                                                    <small>Active constraints identified</small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            break;

                        case 5:
                            <div class="step-content">
                                <h3><i class="bi bi-git"></i> Version Control Integration</h3>
                                <p>Minotaur integrates with Git to help you manage your grammar projects and collaborate with team members.</p>
                                
                                <div class="demo-section">
                                    <h5>Version Control Features:</h5>
                                    <ul class="feature-list">
                                        <li><strong>Git Repository Management:</strong> Create and clone repositories directly in Minotaur</li>
                                        <li><strong>Change Tracking:</strong> Monitor modifications to your grammar files</li>
                                        <li><strong>Branching & Merging:</strong> Work with branches for different grammar variants</li>
                                        <li><strong>Collaboration:</strong> Share and review grammar changes with team members</li>
                                    </ul>
                                    
                                    <div class="git-workflow">
                                        <h6>Typical Git Workflow in Minotaur:</h6>
                                        <div class="workflow-steps">
                                            <div class="workflow-step">
                                                <div class="step-icon">1</div>
                                                <div class="step-content">
                                                    <strong>Initialize</strong><br>
                                                    Create or clone repository
                                                </div>
                                            </div>
                                            <div class="workflow-arrow">→</div>
                                            <div class="workflow-step">
                                                <div class="step-icon">2</div>
                                                <div class="step-content">
                                                    <strong>Edit</strong><br>
                                                    Modify grammar structures
                                                </div>
                                            </div>
                                            <div class="workflow-arrow">→</div>
                                            <div class="workflow-step">
                                                <div class="step-icon">3</div>
                                                <div class="step-content">
                                                    <strong>Commit</strong><br>
                                                    Save changes with messages
                                                </div>
                                            </div>
                                            <div class="workflow-arrow">→</div>
                                            <div class="workflow-step">
                                                <div class="step-icon">4</div>
                                                <div class="step-content">
                                                    <strong>Collaborate</strong><br>
                                                    Push, pull, merge changes
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            break;

                        case 6:
                            <div class="step-content">
                                <h3><i class="bi bi-trophy"></i> You're Ready to Go!</h3>
                                <p class="lead">Congratulations! You've completed the Minotaur tutorial. You now know the basics of using all major components.</p>
                                
                                <div class="next-steps">
                                    <h5>What's Next?</h5>
                                    <div class="action-cards">
                                        <div class="action-card">
                                            <i class="bi bi-diagram-3 text-primary"></i>
                                            <h6>Start Creating</h6>
                                            <p>Open the Cognitive Graph Editor and create your first grammar structure.</p>
                                            <a href="/cognitive-graph-editor" class="btn btn-primary btn-sm">Open Editor</a>
                                        </div>
                                        <div class="action-card">
                                            <i class="bi bi-shop text-success"></i>
                                            <h6>Explore Templates</h6>
                                            <p>Browse the marketplace for pre-built grammar templates and examples.</p>
                                            <a href="/marketplace" class="btn btn-success btn-sm">Visit Marketplace</a>
                                        </div>
                                        <div class="action-card">
                                            <i class="bi bi-chat-dots text-warning"></i>
                                            <h6>Try Socratic Learning</h6>
                                            <p>Learn through guided questions and discovery with our AI-powered tutor.</p>
                                            <a href="/socratic-tutor" class="btn btn-warning btn-sm">Start Socratic Tutor</a>
                                        </div>
                                        <div class="action-card">
                                            <i class="bi bi-book text-info"></i>
                                            <h6>Learn More</h6>
                                            <p>Check out advanced features and best practices in our documentation.</p>
                                            <button class="btn btn-info btn-sm" @onclick="RestartTutorial">Restart Tutorial</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            break;
                    }
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="tutorial-sidebar">
                    <h5><i class="bi bi-list-check"></i> Tutorial Steps</h5>
                    <div class="step-list">
                        @for (int i = 1; i <= totalSteps; i++)
                        {
                            var stepClass = i == currentStep ? "active" : (i < currentStep ? "completed" : "pending");
                            <div class="step-item @stepClass" @onclick="() => GoToStep(i)">
                                <div class="step-number">
                                    @if (i < currentStep)
                                    {
                                        <i class="bi bi-check"></i>
                                    }
                                    else
                                    {
                                        @i
                                    }
                                </div>
                                <div class="step-title">@GetStepTitle(i)</div>
                            </div>
                        }
                    </div>
                    
                    <div class="tutorial-tips mt-4">
                        <h6><i class="bi bi-lightbulb"></i> Quick Tips</h6>
                        <div class="tip-card">
                            <p><strong>Tip:</strong> You can navigate between steps by clicking on them in the sidebar.</p>
                        </div>
                        <div class="tip-card">
                            <p><strong>Tip:</strong> All examples shown are interactive - try exploring the actual components!</p>
                        </div>
                        <div class="tip-card">
                            <p><strong>Tip:</strong> Use keyboard shortcuts: ← → arrow keys to navigate.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="tutorial-navigation">
        <button class="btn btn-outline-secondary" @onclick="PreviousStep" disabled="@(currentStep <= 1)">
            <i class="bi bi-arrow-left"></i> Previous
        </button>
        
        <div class="step-indicators">
            @for (int i = 1; i <= totalSteps; i++)
            {
                <span class="step-dot @(i == currentStep ? "active" : (i < currentStep ? "completed" : ""))"></span>
            }
        </div>
        
        <button class="btn btn-primary" @onclick="NextStep" disabled="@(currentStep >= totalSteps)">
            @(currentStep >= totalSteps ? "Complete" : "Next") <i class="bi bi-arrow-right"></i>
        </button>
    </div>
</div>

<style>
.tutorial-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

.tutorial-header {
    text-align: center;
    margin-bottom: 30px;
}

.tutorial-header h2 {
    color: #333;
    margin-bottom: 20px;
}

.tutorial-progress {
    max-width: 400px;
    margin: 0 auto;
}

.tutorial-step-card {
    background: white;
    border-radius: 10px;
    padding: 30px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    min-height: 500px;
}

.step-content h3 {
    color: #333;
    margin-bottom: 20px;
    border-bottom: 2px solid #007bff;
    padding-bottom: 10px;
}

.feature-highlights {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

.feature-card {
    text-align: center;
    padding: 20px;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    background: #f8f9fa;
}

.feature-icon {
    font-size: 2rem;
    margin-bottom: 10px;
}

.demo-section {
    margin-top: 20px;
}

.feature-list {
    list-style: none;
    padding: 0;
}

.feature-list li {
    padding: 8px 0;
    border-bottom: 1px solid #e9ecef;
}

.demo-svg {
    border: 1px solid #dee2e6;
    border-radius: 5px;
    background: #f8f9fa;
}

.code-example {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 20px;
    margin-top: 20px;
}

.code-example pre {
    background: #263238;
    color: #eeffff;
    padding: 15px;
    border-radius: 5px;
    margin: 10px 0;
}

.arrow-down {
    text-align: center;
    font-size: 2rem;
    margin: 10px 0;
}

.parsed-result {
    background: white;
    border: 1px solid #dee2e6;
    border-radius: 5px;
    padding: 15px;
}

.node-hierarchy {
    font-family: 'Courier New', monospace;
    font-size: 0.9rem;
}

.hierarchy-item {
    padding: 2px 0;
    color: #495057;
}

.hierarchy-item.root {
    font-weight: bold;
    color: #007bff;
}

.hierarchy-item.level-1 { margin-left: 20px; }
.hierarchy-item.level-2 { margin-left: 40px; }
.hierarchy-item.level-3 { margin-left: 60px; }

.analysis-results {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 15px;
    margin-top: 15px;
}

.result-card {
    display: flex;
    align-items: center;
    padding: 15px;
    border-radius: 8px;
    gap: 15px;
}

.result-card.success {
    background: #d4edda;
    border: 1px solid #c3e6cb;
    color: #155724;
}

.result-card.warning {
    background: #fff3cd;
    border: 1px solid #ffeaa7;
    color: #856404;
}

.result-card.info {
    background: #d1ecf1;
    border: 1px solid #bee5eb;
    color: #0c5460;
}

.result-card i {
    font-size: 1.5rem;
}

.git-workflow {
    margin-top: 20px;
}

.workflow-steps {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-top: 20px;
    flex-wrap: wrap;
}

.workflow-step {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    max-width: 120px;
}

.step-icon {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: #007bff;
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    margin-bottom: 10px;
}

.workflow-arrow {
    font-size: 1.5rem;
    color: #6c757d;
    margin: 0 10px;
}

.action-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-top: 20px;
}

.action-card {
    text-align: center;
    padding: 20px;
    border: 1px solid #e0e0e0;
    border-radius: 10px;
    background: white;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.action-card i {
    font-size: 2.5rem;
    margin-bottom: 15px;
}

.tutorial-sidebar {
    background: white;
    border-radius: 10px;
    padding: 20px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    position: sticky;
    top: 20px;
}

.step-list {
    margin-bottom: 20px;
}

.step-item {
    display: flex;
    align-items: center;
    padding: 12px;
    border-radius: 8px;
    margin-bottom: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.step-item:hover {
    background: #f8f9fa;
}

.step-item.active {
    background: #007bff;
    color: white;
}

.step-item.completed {
    background: #28a745;
    color: white;
}

.step-item.pending {
    background: #f8f9fa;
    color: #6c757d;
}

.step-number {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.2);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 12px;
    font-weight: bold;
}

.step-item.active .step-number,
.step-item.completed .step-number {
    background: rgba(255, 255, 255, 0.3);
}

.step-item.pending .step-number {
    background: #e9ecef;
    color: #495057;
}

.tip-card {
    background: #f8f9fa;
    border-left: 4px solid #007bff;
    padding: 15px;
    margin-bottom: 10px;
    border-radius: 0 8px 8px 0;
}

.tutorial-navigation {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 0;
    border-top: 1px solid #e9ecef;
    margin-top: 30px;
}

.step-indicators {
    display: flex;
    gap: 10px;
}

.step-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: #e9ecef;
    transition: all 0.2s ease;
}

.step-dot.active {
    background: #007bff;
    transform: scale(1.2);
}

.step-dot.completed {
    background: #28a745;
}

@@media (max-width: 768px) {
    .workflow-steps {
        flex-direction: column;
        gap: 20px;
    }
    
    .workflow-arrow {
        transform: rotate(90deg);
    }
    
    .feature-highlights,
    .analysis-results,
    .action-cards {
        grid-template-columns: 1fr;
    }
    
    .tutorial-navigation {
        flex-direction: column;
        gap: 20px;
    }
}
</style>

@code {
    private int currentStep = 1;
    private int totalSteps = 6;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("addEventListener", "keydown", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task HandleKeyPress(string key)
    {
        if (key == "ArrowLeft")
        {
            PreviousStep();
        }
        else if (key == "ArrowRight")
        {
            NextStep();
        }
        
        await InvokeAsync(StateHasChanged);
    }

    private void NextStep()
    {
        if (currentStep < totalSteps)
        {
            currentStep++;
            StateHasChanged();
        }
    }

    private void PreviousStep()
    {
        if (currentStep > 1)
        {
            currentStep--;
            StateHasChanged();
        }
    }

    private void GoToStep(int step)
    {
        if (step >= 1 && step <= totalSteps)
        {
            currentStep = step;
            StateHasChanged();
        }
    }

    private void RestartTutorial()
    {
        currentStep = 1;
        StateHasChanged();
    }

    private string GetStepTitle(int step)
    {
        return step switch
        {
            1 => "Welcome to Minotaur",
            2 => "Cognitive Graph Editor",
            3 => "StepParser Integration",
            4 => "Symbolic Analysis",
            5 => "Version Control",
            6 => "Getting Started",
            _ => $"Step {step}"
        };
    }
}