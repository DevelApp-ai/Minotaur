/**
 * Integration test for SVG Export functionality
 */

import { demonstrateSVGExport, demoGrammar } from '../demo/svgExportDemo.js';

describe('SVG Export Integration', () => {
  test('should generate working SVG export from demo grammar', async () => {
    const { svgResult, htmlResult } = await demonstrateSVGExport();

    // Test SVG export
    expect(svgResult.success).toBe(true);
    expect(svgResult.format).toBe('svg');
    expect(svgResult.content).toContain('<?xml version="1.0" encoding="UTF-8"?>');
    expect(svgResult.content).toContain('<svg');
    expect(svgResult.content).toContain('Simple Expression Grammar');
    expect(svgResult.content).toContain('</svg>');
    expect(svgResult.filename).toBe('Simple Expression Grammar.svg');
    expect(svgResult.mimeType).toBe('image/svg+xml');

    // Test metadata
    expect(svgResult.metadata.elementCount).toBe(6);
    expect(svgResult.metadata.size.width).toBe(1000);
    expect(svgResult.metadata.size.height).toBe(400);

    // Test HTML export
    expect(htmlResult.success).toBe(true);
    expect(htmlResult.format).toBe('html');
    expect(htmlResult.content).toContain('<!DOCTYPE html>');
    expect(htmlResult.content).toContain('<svg');
    expect(htmlResult.filename).toBe('Simple Expression Grammar.html');
    expect(htmlResult.mimeType).toBe('text/html');
  });

  test('should render different element types in SVG', async () => {
    const { svgResult } = await demonstrateSVGExport();

    expect(svgResult.success).toBe(true);

    // Should contain different element types
    expect(svgResult.content).toContain('class="terminal"');
    expect(svgResult.content).toContain('class="non-terminal"');
    expect(svgResult.content).toContain('class="connection"');

    // Should contain element text content (note: element types are lowercase)
    expect(svgResult.content).toContain('start');
    expect(svgResult.content).toContain('expression');
    expect(svgResult.content).toContain('term');
    expect(svgResult.content).toContain('[0-9]+');
    expect(svgResult.content).toContain('end');
  });

  test('should include proper SVG structure and styling', async () => {
    const { svgResult } = await demonstrateSVGExport();

    expect(svgResult.success).toBe(true);

    // Should have proper SVG structure
    expect(svgResult.content).toContain('<defs>');
    expect(svgResult.content).toContain('<style>');
    expect(svgResult.content).toContain('viewBox="0 0 1000 400"');
    expect(svgResult.content).toContain('xmlns="http://www.w3.org/2000/svg"');

    // Should include CSS classes and styling
    expect(svgResult.content).toContain('.diagram-title');
    expect(svgResult.content).toContain('.diagram-element');

    // Should include Minotaur branding
    expect(svgResult.content).toContain('Generated by Minotaur');
  });
});