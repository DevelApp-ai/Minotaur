/*
 * C17 Grammar Specification (ISO/IEC 9899:2018)
 * 
 * This grammar is designed for parsing the C17 programming language and is suitable for a grammar marketplace.
 * It covers the full language specification, including modern features and is based on the official ISO standard.
 */

TokenSplitter: Space
Keywords: auto, break, case, char, const, continue, default, do, double, else, enum, extern, float, for, goto, if, int, long, register, return, short, signed, sizeof, static, struct, switch, typedef, union, unsigned, void, volatile, while, _Alignas, _Alignof, _Atomic, _Bool, _Complex, _Generic, _Imaginary, _Noreturn, _Static_assert, _Thread_local

<translation-unit> ::= <external-declaration>+

<external-declaration> ::= <function-definition> | <declaration>

<function-definition> ::= <declaration-specifiers>? <declarator> <declaration-list>? <compound-statement>

<declaration> ::= <declaration-specifiers> <init-declarator-list>? ;

<declaration-specifiers> ::= <storage-class-specifier> <declaration-specifiers>?
                         | <type-specifier> <declaration-specifiers>?
                         | <type-qualifier> <declaration-specifiers>?
                         | <function-specifier> <declaration-specifiers>?
                         | <alignment-specifier> <declaration-specifiers>?

<init-declarator-list> ::= <init-declarator> | <init-declarator-list> , <init-declarator>

<init-declarator> ::= <declarator> | <declarator> = <initializer>

<storage-class-specifier> ::= typedef | extern | static | _Thread_local | auto | register

<type-specifier> ::= void | char | short | int | long | float | double | signed | unsigned | _Bool | _Complex
                 | <atomic-type-specifier>
                 | <struct-or-union-specifier>
                 | <enum-specifier>
                 | <typedef-name>

<struct-or-union-specifier> ::= <struct-or-union> <identifier>? { <struct-declaration-list> } | <struct-or-union> <identifier>

<struct-or-union> ::= struct | union

<struct-declaration-list> ::= <struct-declaration>+

<struct-declaration> ::= <specifier-qualifier-list> <struct-declarator-list>? ;

<specifier-qualifier-list> ::= <type-specifier> <specifier-qualifier-list>? | <type-qualifier> <specifier-qualifier-list>?

<struct-declarator-list> ::= <struct-declarator> | <struct-declarator-list> , <struct-declarator>

<struct-declarator> ::= <declarator> | <declarator>? : <constant-expression>

<enum-specifier> ::= enum <identifier>? { <enumerator-list> } | enum <identifier>? { <enumerator-list> , } | enum <identifier>

<enumerator-list> ::= <enumerator> | <enumerator-list> , <enumerator>

<enumerator> ::= <enumeration-constant> | <enumeration-constant> = <constant-expression>

<atomic-type-specifier> ::= _Atomic ( <type-name> )

<type-qualifier> ::= const | restrict | volatile | _Atomic

<function-specifier> ::= inline | _Noreturn

<alignment-specifier> ::= _Alignas ( <type-name> ) | _Alignas ( <constant-expression> )

<declarator> ::= <pointer>? <direct-declarator>

<direct-declarator> ::= <identifier>
                    | ( <declarator> )
                    | <direct-declarator> [ <type-qualifier-list>? <assignment-expression>? ]
                    | <direct-declarator> [ static <type-qualifier-list>? <assignment-expression> ]
                    | <direct-declarator> [ <type-qualifier-list> static <assignment-expression> ]
                    | <direct-declarator> [ <type-qualifier-list>? * ]
                    | <direct-declarator> ( <parameter-type-list> )
                    | <direct-declarator> ( <identifier-list>? )

<pointer> ::= * <type-qualifier-list>? | * <type-qualifier-list>? <pointer>

<type-qualifier-list> ::= <type-qualifier>+

<parameter-type-list> ::= <parameter-list> | <parameter-list> , ...

<parameter-list> ::= <parameter-declaration> | <parameter-list> , <parameter-declaration>

<parameter-declaration> ::= <declaration-specifiers> <declarator> | <declaration-specifiers> <abstract-declarator>?

<identifier-list> ::= <identifier> | <identifier-list> , <identifier>

<type-name> ::= <specifier-qualifier-list> <abstract-declarator>?

<abstract-declarator> ::= <pointer> | <pointer>? <direct-abstract-declarator>

<direct-abstract-declarator> ::= ( <abstract-declarator> )
                           | <direct-abstract-declarator>? [ <type-qualifier-list>? <assignment-expression>? ]
                           | <direct-abstract-declarator>? [ static <type-qualifier-list>? <assignment-expression> ]
                           | <direct-abstract-declarator>? [ <type-qualifier-list> static <assignment-expression> ]
                           | <direct-abstract-declarator>? [ * ]
                           | <direct-abstract-declarator>? ( <parameter-type-list>? )

<typedef-name> ::= <identifier>

<initializer> ::= <assignment-expression> | { <initializer-list> } | { <initializer-list> , }

<initializer-list> ::= <designation>? <initializer> | <initializer-list> , <designation>? <initializer>

<designation> ::= <designator-list> =

<designator-list> ::= <designator>+

<designator> ::= [ <constant-expression> ] | . <identifier>

<static_assert-declaration> ::= _Static_assert ( <constant-expression> , <string-literal> ) ;

<statement> ::= <labeled-statement>
            | <compound-statement>
            | <expression-statement>
            | <selection-statement>
            | <iteration-statement>
            | <jump-statement>

<labeled-statement> ::= <identifier> : <statement> | case <constant-expression> : <statement> | default : <statement>

<compound-statement> ::= { <block-item-list>? }

<block-item-list> ::= <block-item>+

<block-item> ::= <declaration> | <statement>

<expression-statement> ::= <expression>? ;

<selection-statement> ::= if ( <expression> ) <statement> | if ( <expression> ) <statement> else <statement> | switch ( <expression> ) <statement>

<iteration-statement> ::= while ( <expression> ) <statement> | do <statement> while ( <expression> ) ; | for ( <expression>? ; <expression>? ; <expression>? ) <statement> | for ( <declaration> <expression>? ; <expression>? ) <statement>

<jump-statement> ::= goto <identifier> ; | continue ; | break ; | return <expression>? ;

<expression> ::= <assignment-expression> | <expression> , <assignment-expression>

<assignment-expression> ::= <conditional-expression> | <unary-expression> <assignment-operator> <assignment-expression>

<assignment-operator> ::= = | *= | /= | %= | += | -= | <<= | >>= | &= | ^= | |=

<conditional-expression> ::= <logical-OR-expression> | <logical-OR-expression> ? <expression> : <conditional-expression>

<constant-expression> ::= <conditional-expression>

<logical-OR-expression> ::= <logical-AND-expression> | <logical-OR-expression> || <logical-AND-expression>

<logical-AND-expression> ::= <inclusive-OR-expression> | <logical-AND-expression> && <inclusive-OR-expression>

<inclusive-OR-expression> ::= <exclusive-OR-expression> | <inclusive-OR-expression> | <exclusive-OR-expression>

<exclusive-OR-expression> ::= <AND-expression> | <exclusive-OR-expression> ^ <AND-expression>

<AND-expression> ::= <equality-expression> | <AND-expression> & <equality-expression>

<equality-expression> ::= <relational-expression> | <equality-expression> == <relational-expression> | <equality-expression> != <relational-expression>

<relational-expression> ::= <shift-expression> | <relational-expression> < <shift-expression> | <relational-expression> > <shift-expression> | <relational-expression> <= <shift-expression> | <relational-expression> >= <shift-expression>

<shift-expression> ::= <additive-expression> | <shift-expression> << <additive-expression> | <shift-expression> >> <additive-expression>

<additive-expression> ::= <multiplicative-expression> | <additive-expression> + <multiplicative-expression> | <additive-expression> - <multiplicative-expression>

<multiplicative-expression> ::= <cast-expression> | <multiplicative-expression> * <cast-expression> | <multiplicative-expression> / <cast-expression> | <multiplicative-expression> % <cast-expression>

<cast-expression> ::= <unary-expression> | ( <type-name> ) <cast-expression>

<unary-expression> ::= <postfix-expression>
                 | ++ <unary-expression>
                 | -- <unary-expression>
                 | <unary-operator> <cast-expression>
                 | sizeof <unary-expression>
                 | sizeof ( <type-name> )
                 | _Alignof ( <type-name> )

<unary-operator> ::= & | * | + | - | ~ | !

<postfix-expression> ::= <primary-expression>
                   | <postfix-expression> [ <expression> ]
                   | <postfix-expression> ( <argument-expression-list>? )
                   | <postfix-expression> . <identifier>
                   | <postfix-expression> -> <identifier>
                   | <postfix-expression> ++
                   | <postfix-expression> --
                   | ( <type-name> ) { <initializer-list> }
                   | ( <type-name> ) { <initializer-list> , }

<primary-expression> ::= <identifier> | <constant> | <string-literal> | ( <expression> ) | <generic-selection>

<constant> ::= <integer-constant> | <floating-constant> | <enumeration-constant> | <character-constant>

<string-literal> ::= <encoding-prefix>? " <s-char-sequence>? "

<generic-selection> ::= _Generic ( <assignment-expression> , <generic-assoc-list> )

<generic-assoc-list> ::= <generic-association> | <generic-assoc-list> , <generic-association>

<generic-association> ::= <type-name> : <assignment-expression> | default : <assignment-expression>

<argument-expression-list> ::= <assignment-expression> | <argument-expression-list> , <assignment-expression>

<enumeration-constant> ::= <identifier>

<integer-constant> ::= <decimal-constant> <integer-suffix>?
                   | <octal-constant> <integer-suffix>?
                   | <hexadecimal-constant> <integer-suffix>?

<decimal-constant> ::= <nonzero-digit> <digit-sequence>?

<octal-constant> ::= 0 <octal-digit-sequence>?

<hexadecimal-constant> ::= <hexadecimal-prefix> <hexadecimal-digit-sequence>

<hexadecimal-prefix> ::= 0x | 0X

<nonzero-digit> ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

<digit-sequence> ::= <digit>+

<octal-digit-sequence> ::= <octal-digit>+

<hexadecimal-digit-sequence> ::= <hexadecimal-digit>+

<integer-suffix> ::= <unsigned-suffix> <long-suffix>? | <unsigned-suffix> <long-long-suffix>
                 | <long-suffix> <unsigned-suffix>? | <long-long-suffix> <unsigned-suffix>?

<unsigned-suffix> ::= u | U

<long-suffix> ::= l | L

<long-long-suffix> ::= ll | LL

<floating-constant> ::= <decimal-floating-constant> | <hexadecimal-floating-constant>

<decimal-floating-constant> ::= <fractional-constant> <exponent-part>? <floating-suffix>?
                          | <digit-sequence> <exponent-part> <floating-suffix>?

<hexadecimal-floating-constant> ::= <hexadecimal-prefix> <hexadecimal-fractional-constant> <binary-exponent-part> <floating-suffix>?
                                | <hexadecimal-prefix> <hexadecimal-digit-sequence> <binary-exponent-part> <floating-suffix>?

<fractional-constant> ::= <digit-sequence>? . <digit-sequence> | <digit-sequence> .

<exponent-part> ::= e <sign>? <digit-sequence> | E <sign>? <digit-sequence>

<sign> ::= + | -

<binary-exponent-part> ::= p <sign>? <digit-sequence> | P <sign>? <digit-sequence>

<hexadecimal-fractional-constant> ::= <hexadecimal-digit-sequence>? . <hexadecimal-digit-sequence>
                                | <hexadecimal-digit-sequence> .

<floating-suffix> ::= f | l | F | L

<character-constant> ::= <encoding-prefix>? ' <c-char-sequence> '

<encoding-prefix> ::= u8 | u | U | L

<c-char-sequence> ::= <c-char>+

<c-char> ::= <any-char-except-single-quote-backslash-newline> | <escape-sequence>

<s-char-sequence> ::= <s-char>+

<s-char> ::= <any-char-except-double-quote-backslash-newline> | <escape-sequence>

<escape-sequence> ::= <simple-escape-sequence> | <octal-escape-sequence> | <hexadecimal-escape-sequence> | <universal-character-name>

<simple-escape-sequence> ::= \' | \" | \? | \\ | \a | \b | \f | \n | \r | \t | \v

<octal-escape-sequence> ::= \ <octal-digit> | \ <octal-digit> <octal-digit> | \ <octal-digit> <octal-digit> <octal-digit>

<hexadecimal-escape-sequence> ::= \x <hexadecimal-digit>+

<universal-character-name> ::= \u <hex-quad> | \U <hex-quad> <hex-quad>

<hex-quad> ::= <hexadecimal-digit> <hexadecimal-digit> <hexadecimal-digit> <hexadecimal-digit>

<digit> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

<octal-digit> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7

<hexadecimal-digit> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | a | b | c | d | e | f | A | B | C | D | E | F

<identifier> ::= <identifier-nondigit> <identifier-nondigit-or-digit>*

<identifier-nondigit> ::= <nondigit> | <universal-character-name>

<identifier-nondigit-or-digit> ::= <nondigit> | <digit> | <universal-character-name>

<nondigit> ::= _ | a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z


