/*
 * Classic ASP Grammar Specification
 * 
 * This grammar supports Classic ASP (Active Server Pages) with both VBScript and JScript
 * server-side scripting languages, HTML markup, and ASP directives.
 * 
 * Features covered:
 * - ASP directives and processing instructions
 * - Server-side VBScript embedded code
 * - Server-side JScript embedded code
 * - HTML markup integration
 * - ASP built-in objects (Request, Response, Server, Session, Application)
 * - Include files and server-side includes
 * - Error handling and debugging
 * - COM object instantiation
 * - Database connectivity (ADO)
 * - Mixed content (HTML + server code)
 */

grammar ClassicASP;

// ============================================================================
// LEXER RULES
// ============================================================================

// ASP Processing Instructions
ASP_DIRECTIVE_START : '<%@' -> pushMode(ASP_DIRECTIVE_MODE) ;
ASP_CODE_START      : '<%' -> pushMode(ASP_CODE_MODE) ;
ASP_EXPR_START      : '<%=' -> pushMode(ASP_EXPR_MODE) ;

// HTML Content (default mode)
HTML_TEXT           : ~[<]+ ;
HTML_TAG_START      : '<' ~[%] -> pushMode(HTML_TAG_MODE) ;

// Comments
HTML_COMMENT        : '<!--' .*? '-->' -> skip ;

// Whitespace in default mode
WS_DEFAULT          : [ \t\r\n]+ -> skip ;

// ============================================================================
// ASP DIRECTIVE MODE
// ============================================================================

mode ASP_DIRECTIVE_MODE;

ASP_DIRECTIVE_END   : '%>' -> popMode ;

// Directive Keywords
LANGUAGE            : 'LANGUAGE' | 'language' ;
CODEPAGE            : 'CODEPAGE' | 'codepage' ;
TRANSACTION         : 'TRANSACTION' | 'transaction' ;
SESSION             : 'SESSION' | 'session' ;
BUFFER              : 'BUFFER' | 'buffer' ;
ENABLESESSIONSTATE  : 'ENABLESESSIONSTATE' | 'enablesessionstate' ;
LCID                : 'LCID' | 'lcid' ;

// Directive Values
VBSCRIPT            : 'VBSCRIPT' | 'vbscript' | 'VBScript' ;
JSCRIPT             : 'JSCRIPT' | 'jscript' | 'JScript' | 'JavaScript' | 'javascript' ;
TRUE                : 'TRUE' | 'true' | 'True' ;
FALSE               : 'FALSE' | 'false' | 'False' ;
REQUIRED            : 'REQUIRED' | 'required' ;
REQUIRES_NEW        : 'REQUIRES_NEW' | 'requires_new' ;
SUPPORTED           : 'SUPPORTED' | 'supported' ;
NOT_SUPPORTED       : 'NOT_SUPPORTED' | 'not_supported' ;

EQUALS_DIR          : '=' ;
STRING_LITERAL_DIR  : '"' (~["\r\n] | '""')* '"' 
                    | '\'' (~['\r\n] | '\'\'')* '\'' ;
NUMBER_LITERAL_DIR  : [0-9]+ ;
WS_DIR              : [ \t\r\n]+ -> skip ;

// ============================================================================
// ASP CODE MODE (VBScript/JScript)
// ============================================================================

mode ASP_CODE_MODE;

ASP_CODE_END        : '%>' -> popMode ;

// Determine script language context
VBSCRIPT_INDICATOR  : 'Dim' | 'Set' | 'If' | 'Then' | 'End' | 'Function' | 'Sub' | 'Call' -> pushMode(VBSCRIPT_MODE) ;
JSCRIPT_INDICATOR   : 'var' | 'function' | 'if' | '{' | '}' -> pushMode(JSCRIPT_MODE) ;

// Generic code content (fallback)
CODE_CONTENT        : ~[%]+ ;
WS_CODE             : [ \t\r\n]+ -> skip ;

// ============================================================================
// ASP EXPRESSION MODE
// ============================================================================

mode ASP_EXPR_MODE;

ASP_EXPR_END        : '%>' -> popMode ;
EXPR_CONTENT        : ~[%]+ ;
WS_EXPR             : [ \t\r\n]+ -> skip ;

// ============================================================================
// HTML TAG MODE
// ============================================================================

mode HTML_TAG_MODE;

HTML_TAG_END        : '>' -> popMode ;
HTML_TAG_CLOSE      : '/>' -> popMode ;
HTML_ATTR_NAME      : [a-zA-Z_][a-zA-Z0-9_-]* ;
HTML_ATTR_VALUE     : '"' ~["]* '"' | '\'' ~[']* '\'' | [a-zA-Z0-9_-]+ ;
HTML_EQUALS         : '=' ;
WS_HTML             : [ \t\r\n]+ -> skip ;

// ============================================================================
// VBSCRIPT MODE
// ============================================================================

mode VBSCRIPT_MODE;

VB_ASP_END          : '%>' -> popMode, popMode ;

// VBScript Keywords
VB_AND              : 'And' | 'AND' | 'and' ;
VB_AS               : 'As' | 'AS' | 'as' ;
VB_BOOLEAN          : 'Boolean' | 'BOOLEAN' | 'boolean' ;
VB_BYREF            : 'ByRef' | 'BYREF' | 'byref' ;
VB_BYTE             : 'Byte' | 'BYTE' | 'byte' ;
VB_BYVAL            : 'ByVal' | 'BYVAL' | 'byval' ;
VB_CALL             : 'Call' | 'CALL' | 'call' ;
VB_CASE             : 'Case' | 'CASE' | 'case' ;
VB_CLASS            : 'Class' | 'CLASS' | 'class' ;
VB_CONST            : 'Const' | 'CONST' | 'const' ;
VB_CURRENCY         : 'Currency' | 'CURRENCY' | 'currency' ;
VB_DATE             : 'Date' | 'DATE' | 'date' ;
VB_DIM              : 'Dim' | 'DIM' | 'dim' ;
VB_DO               : 'Do' | 'DO' | 'do' ;
VB_DOUBLE           : 'Double' | 'DOUBLE' | 'double' ;
VB_EACH             : 'Each' | 'EACH' | 'each' ;
VB_ELSE             : 'Else' | 'ELSE' | 'else' ;
VB_ELSEIF           : 'ElseIf' | 'ELSEIF' | 'elseif' ;
VB_EMPTY            : 'Empty' | 'EMPTY' | 'empty' ;
VB_END              : 'End' | 'END' | 'end' ;
VB_EQV              : 'Eqv' | 'EQV' | 'eqv' ;
VB_ERROR            : 'Error' | 'ERROR' | 'error' ;
VB_EXIT             : 'Exit' | 'EXIT' | 'exit' ;
VB_FALSE            : 'False' | 'FALSE' | 'false' ;
VB_FOR              : 'For' | 'FOR' | 'for' ;
VB_FUNCTION         : 'Function' | 'FUNCTION' | 'function' ;
VB_GET              : 'Get' | 'GET' | 'get' ;
VB_GOTO             : 'GoTo' | 'GOTO' | 'goto' ;
VB_IF               : 'If' | 'IF' | 'if' ;
VB_IMP              : 'Imp' | 'IMP' | 'imp' ;
VB_IN               : 'In' | 'IN' | 'in' ;
VB_INTEGER          : 'Integer' | 'INTEGER' | 'integer' ;
VB_IS               : 'Is' | 'IS' | 'is' ;
VB_LET              : 'Let' | 'LET' | 'let' ;
VB_LONG             : 'Long' | 'LONG' | 'long' ;
VB_LOOP             : 'Loop' | 'LOOP' | 'loop' ;
VB_MOD              : 'Mod' | 'MOD' | 'mod' ;
VB_NEW              : 'New' | 'NEW' | 'new' ;
VB_NEXT             : 'Next' | 'NEXT' | 'next' ;
VB_NOT              : 'Not' | 'NOT' | 'not' ;
VB_NOTHING          : 'Nothing' | 'NOTHING' | 'nothing' ;
VB_NULL             : 'Null' | 'NULL' | 'null' ;
VB_OBJECT           : 'Object' | 'OBJECT' | 'object' ;
VB_ON               : 'On' | 'ON' | 'on' ;
VB_OPTION           : 'Option' | 'OPTION' | 'option' ;
VB_OR               : 'Or' | 'OR' | 'or' ;
VB_PRESERVE         : 'Preserve' | 'PRESERVE' | 'preserve' ;
VB_PRIVATE          : 'Private' | 'PRIVATE' | 'private' ;
VB_PROPERTY         : 'Property' | 'PROPERTY' | 'property' ;
VB_PUBLIC           : 'Public' | 'PUBLIC' | 'public' ;
VB_REDIM            : 'ReDim' | 'REDIM' | 'redim' ;
VB_RESUME           : 'Resume' | 'RESUME' | 'resume' ;
VB_SELECT           : 'Select' | 'SELECT' | 'select' ;
VB_SET              : 'Set' | 'SET' | 'set' ;
VB_SINGLE           : 'Single' | 'SINGLE' | 'single' ;
VB_STATIC           : 'Static' | 'STATIC' | 'static' ;
VB_STEP             : 'Step' | 'STEP' | 'step' ;
VB_STRING           : 'String' | 'STRING' | 'string' ;
VB_SUB              : 'Sub' | 'SUB' | 'sub' ;
VB_THEN             : 'Then' | 'THEN' | 'then' ;
VB_TO               : 'To' | 'TO' | 'to' ;
VB_TRUE             : 'True' | 'TRUE' | 'true' ;
VB_UNTIL            : 'Until' | 'UNTIL' | 'until' ;
VB_VARIANT          : 'Variant' | 'VARIANT' | 'variant' ;
VB_WEND             : 'Wend' | 'WEND' | 'wend' ;
VB_WHILE            : 'While' | 'WHILE' | 'while' ;
VB_WITH             : 'With' | 'WITH' | 'with' ;
VB_XOR              : 'Xor' | 'XOR' | 'xor' ;

// VBScript Operators
VB_ASSIGN           : '=' ;
VB_PLUS             : '+' ;
VB_MINUS            : '-' ;
VB_MULTIPLY         : '*' ;
VB_DIVIDE           : '/' ;
VB_INT_DIVIDE       : '\\' ;
VB_POWER            : '^' ;
VB_CONCAT           : '&' ;
VB_LT               : '<' ;
VB_GT               : '>' ;
VB_LE               : '<=' ;
VB_GE               : '>=' ;
VB_NE               : '<>' ;

// VBScript Punctuation
VB_LPAREN           : '(' ;
VB_RPAREN           : ')' ;
VB_COMMA            : ',' ;
VB_DOT              : '.' ;
VB_COLON            : ':' ;
VB_SEMICOLON        : ';' ;

// VBScript Literals
VB_STRING_LITERAL   : '"' (~["\r\n] | '""')* '"' ;
VB_NUMBER_LITERAL   : [0-9]+ ('.' [0-9]+)? ([eE] [+-]? [0-9]+)? ;
VB_DATE_LITERAL     : '#' ~[#\r\n]* '#' ;

// VBScript Identifiers
VB_IDENTIFIER       : [a-zA-Z_][a-zA-Z0-9_]* ;

// VBScript Comments
VB_COMMENT          : ('\'' | 'REM' | 'rem' | 'Rem') ~[\r\n]* -> skip ;

// VBScript Whitespace
VB_WS               : [ \t]+ -> skip ;
VB_NEWLINE          : [\r\n]+ ;

// ============================================================================
// JSCRIPT MODE
// ============================================================================

mode JSCRIPT_MODE;

JS_ASP_END          : '%>' -> popMode, popMode ;

// JScript Keywords
JS_BREAK            : 'break' ;
JS_CASE             : 'case' ;
JS_CATCH            : 'catch' ;
JS_CONTINUE         : 'continue' ;
JS_DEFAULT          : 'default' ;
JS_DELETE           : 'delete' ;
JS_DO               : 'do' ;
JS_ELSE             : 'else' ;
JS_FINALLY          : 'finally' ;
JS_FOR              : 'for' ;
JS_FUNCTION         : 'function' ;
JS_IF               : 'if' ;
JS_IN               : 'in' ;
JS_INSTANCEOF       : 'instanceof' ;
JS_NEW              : 'new' ;
JS_RETURN           : 'return' ;
JS_SWITCH           : 'switch' ;
JS_THIS             : 'this' ;
JS_THROW            : 'throw' ;
JS_TRY              : 'try' ;
JS_TYPEOF           : 'typeof' ;
JS_VAR              : 'var' ;
JS_VOID             : 'void' ;
JS_WHILE            : 'while' ;
JS_WITH             : 'with' ;

// JScript Literals
JS_TRUE             : 'true' ;
JS_FALSE            : 'false' ;
JS_NULL             : 'null' ;
JS_UNDEFINED        : 'undefined' ;

// JScript Operators
JS_ASSIGN           : '=' ;
JS_PLUS_ASSIGN      : '+=' ;
JS_MINUS_ASSIGN     : '-=' ;
JS_MULT_ASSIGN      : '*=' ;
JS_DIV_ASSIGN       : '/=' ;
JS_MOD_ASSIGN       : '%=' ;
JS_EQ               : '==' ;
JS_NE               : '!=' ;
JS_STRICT_EQ        : '===' ;
JS_STRICT_NE        : '!==' ;
JS_LT               : '<' ;
JS_GT               : '>' ;
JS_LE               : '<=' ;
JS_GE               : '>=' ;
JS_PLUS             : '+' ;
JS_MINUS            : '-' ;
JS_MULTIPLY         : '*' ;
JS_DIVIDE           : '/' ;
JS_MODULO           : '%' ;
JS_INCREMENT        : '++' ;
JS_DECREMENT        : '--' ;
JS_LOGICAL_AND      : '&&' ;
JS_LOGICAL_OR       : '||' ;
JS_LOGICAL_NOT      : '!' ;
JS_BITWISE_AND      : '&' ;
JS_BITWISE_OR       : '|' ;
JS_BITWISE_XOR      : '^' ;
JS_BITWISE_NOT      : '~' ;
JS_LEFT_SHIFT       : '<<' ;
JS_RIGHT_SHIFT      : '>>' ;
JS_UNSIGNED_RIGHT_SHIFT : '>>>' ;

// JScript Punctuation
JS_LPAREN           : '(' ;
JS_RPAREN           : ')' ;
JS_LBRACE           : '{' ;
JS_RBRACE           : '}' ;
JS_LBRACKET         : '[' ;
JS_RBRACKET         : ']' ;
JS_SEMICOLON        : ';' ;
JS_COMMA            : ',' ;
JS_DOT              : '.' ;
JS_QUESTION         : '?' ;
JS_COLON            : ':' ;

// JScript Literals
JS_STRING_LITERAL   : '"' (~["\\\r\n] | '\\' .)* '"' 
                    | '\'' (~['\\\r\n] | '\\' .)* '\'' ;
JS_NUMBER_LITERAL   : [0-9]+ ('.' [0-9]+)? ([eE] [+-]? [0-9]+)? 
                    | '0x' [0-9a-fA-F]+ ;
JS_REGEX_LITERAL    : '/' (~[/\\\r\n] | '\\' .)+ '/' [gimuy]* ;

// JScript Identifiers
JS_IDENTIFIER       : [a-zA-Z_$][a-zA-Z0-9_$]* ;

// JScript Comments
JS_LINE_COMMENT     : '//' ~[\r\n]* -> skip ;
JS_BLOCK_COMMENT    : '/*' .*? '*/' -> skip ;

// JScript Whitespace
JS_WS               : [ \t]+ -> skip ;
JS_NEWLINE          : [\r\n]+ ;

// ============================================================================
// PARSER RULES
// ============================================================================

// Main ASP Document
aspDocument
    : aspContent* EOF
    ;

aspContent
    : aspDirective
    | aspCodeBlock
    | aspExpression
    | htmlContent
    | htmlTag
    ;

// ASP Directives
aspDirective
    : ASP_DIRECTIVE_START directiveAttribute* ASP_DIRECTIVE_END
    ;

directiveAttribute
    : LANGUAGE EQUALS_DIR (VBSCRIPT | JSCRIPT)
    | CODEPAGE EQUALS_DIR NUMBER_LITERAL_DIR
    | TRANSACTION EQUALS_DIR (REQUIRED | REQUIRES_NEW | SUPPORTED | NOT_SUPPORTED)
    | SESSION EQUALS_DIR (TRUE | FALSE)
    | BUFFER EQUALS_DIR (TRUE | FALSE)
    | ENABLESESSIONSTATE EQUALS_DIR (TRUE | FALSE)
    | LCID EQUALS_DIR NUMBER_LITERAL_DIR
    ;

// ASP Code Blocks
aspCodeBlock
    : ASP_CODE_START (vbscriptCode | jscriptCode | genericCode) ASP_CODE_END
    ;

aspExpression
    : ASP_EXPR_START expressionContent ASP_EXPR_END
    ;

expressionContent
    : EXPR_CONTENT
    ;

genericCode
    : CODE_CONTENT
    ;

// VBScript Code
vbscriptCode
    : vbStatement*
    ;

vbStatement
    : vbVariableDeclaration
    | vbAssignment
    | vbIfStatement
    | vbForStatement
    | vbWhileStatement
    | vbDoStatement
    | vbSelectStatement
    | vbFunctionDeclaration
    | vbSubDeclaration
    | vbCallStatement
    | vbSetStatement
    | vbExitStatement
    | vbReturnStatement
    | vbExpressionStatement
    | VB_NEWLINE
    ;

vbVariableDeclaration
    : VB_DIM vbVariableList VB_NEWLINE?
    | VB_CONST VB_IDENTIFIER VB_ASSIGN vbExpression VB_NEWLINE?
    | VB_REDIM (VB_PRESERVE)? vbVariableList VB_NEWLINE?
    ;

vbVariableList
    : vbVariable (VB_COMMA vbVariable)*
    ;

vbVariable
    : VB_IDENTIFIER (VB_LPAREN vbExpression? VB_RPAREN)? (VB_AS vbType)?
    ;

vbType
    : VB_BOOLEAN | VB_BYTE | VB_CURRENCY | VB_DATE | VB_DOUBLE | VB_INTEGER | VB_LONG | VB_OBJECT | VB_SINGLE | VB_STRING | VB_VARIANT
    ;

vbAssignment
    : vbLeftValue VB_ASSIGN vbExpression VB_NEWLINE?
    ;

vbSetStatement
    : VB_SET vbLeftValue VB_ASSIGN vbExpression VB_NEWLINE?
    ;

vbLeftValue
    : VB_IDENTIFIER (VB_DOT VB_IDENTIFIER | VB_LPAREN vbExpression VB_RPAREN)*
    ;

vbIfStatement
    : VB_IF vbExpression VB_THEN VB_NEWLINE?
      vbStatement*
      (VB_ELSEIF vbExpression VB_THEN VB_NEWLINE? vbStatement*)*
      (VB_ELSE VB_NEWLINE? vbStatement*)?
      VB_END VB_IF VB_NEWLINE?
    | VB_IF vbExpression VB_THEN vbStatement (VB_ELSE vbStatement)? VB_NEWLINE?
    ;

vbForStatement
    : VB_FOR VB_IDENTIFIER VB_ASSIGN vbExpression VB_TO vbExpression (VB_STEP vbExpression)? VB_NEWLINE?
      vbStatement*
      VB_NEXT (VB_IDENTIFIER)? VB_NEWLINE?
    | VB_FOR VB_EACH VB_IDENTIFIER VB_IN vbExpression VB_NEWLINE?
      vbStatement*
      VB_NEXT (VB_IDENTIFIER)? VB_NEWLINE?
    ;

vbWhileStatement
    : VB_WHILE vbExpression VB_NEWLINE?
      vbStatement*
      VB_WEND VB_NEWLINE?
    ;

vbDoStatement
    : VB_DO (VB_WHILE | VB_UNTIL) vbExpression VB_NEWLINE?
      vbStatement*
      VB_LOOP VB_NEWLINE?
    | VB_DO VB_NEWLINE?
      vbStatement*
      VB_LOOP (VB_WHILE | VB_UNTIL) vbExpression VB_NEWLINE?
    ;

vbSelectStatement
    : VB_SELECT VB_CASE vbExpression VB_NEWLINE?
      vbCaseClause*
      (VB_CASE VB_ELSE VB_NEWLINE? vbStatement*)?
      VB_END VB_SELECT VB_NEWLINE?
    ;

vbCaseClause
    : VB_CASE vbCaseValue (VB_COMMA vbCaseValue)* VB_NEWLINE?
      vbStatement*
    ;

vbCaseValue
    : vbExpression (VB_TO vbExpression)?
    | VB_IS vbComparisonOperator vbExpression
    ;

vbComparisonOperator
    : VB_LT | VB_GT | VB_LE | VB_GE | VB_ASSIGN | VB_NE
    ;

vbFunctionDeclaration
    : (VB_PUBLIC | VB_PRIVATE)? VB_FUNCTION VB_IDENTIFIER VB_LPAREN vbParameterList? VB_RPAREN VB_NEWLINE?
      vbStatement*
      VB_END VB_FUNCTION VB_NEWLINE?
    ;

vbSubDeclaration
    : (VB_PUBLIC | VB_PRIVATE)? VB_SUB VB_IDENTIFIER VB_LPAREN vbParameterList? VB_RPAREN VB_NEWLINE?
      vbStatement*
      VB_END VB_SUB VB_NEWLINE?
    ;

vbParameterList
    : vbParameter (VB_COMMA vbParameter)*
    ;

vbParameter
    : (VB_BYVAL | VB_BYREF)? VB_IDENTIFIER (VB_AS vbType)?
    ;

vbCallStatement
    : VB_CALL? vbLeftValue (VB_LPAREN vbArgumentList? VB_RPAREN)? VB_NEWLINE?
    ;

vbArgumentList
    : vbExpression (VB_COMMA vbExpression)*
    ;

vbExitStatement
    : VB_EXIT (VB_FUNCTION | VB_SUB | VB_FOR | VB_DO) VB_NEWLINE?
    ;

vbReturnStatement
    : VB_IDENTIFIER VB_ASSIGN vbExpression VB_NEWLINE? // VBScript function return
    ;

vbExpressionStatement
    : vbExpression VB_NEWLINE?
    ;

vbExpression
    : vbLogicalExpression
    ;

vbLogicalExpression
    : vbComparisonExpression ((VB_AND | VB_OR | VB_XOR | VB_EQV | VB_IMP) vbComparisonExpression)*
    ;

vbComparisonExpression
    : vbConcatenationExpression ((VB_LT | VB_GT | VB_LE | VB_GE | VB_ASSIGN | VB_NE | VB_IS) vbConcatenationExpression)*
    ;

vbConcatenationExpression
    : vbArithmeticExpression (VB_CONCAT vbArithmeticExpression)*
    ;

vbArithmeticExpression
    : vbTerm ((VB_PLUS | VB_MINUS) vbTerm)*
    ;

vbTerm
    : vbFactor ((VB_MULTIPLY | VB_DIVIDE | VB_INT_DIVIDE | VB_MOD) vbFactor)*
    ;

vbFactor
    : vbPower
    ;

vbPower
    : vbUnaryExpression (VB_POWER vbUnaryExpression)*
    ;

vbUnaryExpression
    : (VB_NOT | VB_MINUS | VB_PLUS)? vbPrimaryExpression
    ;

vbPrimaryExpression
    : VB_IDENTIFIER (VB_DOT VB_IDENTIFIER | VB_LPAREN vbArgumentList? VB_RPAREN)*
    | VB_STRING_LITERAL
    | VB_NUMBER_LITERAL
    | VB_DATE_LITERAL
    | VB_TRUE
    | VB_FALSE
    | VB_NULL
    | VB_NOTHING
    | VB_EMPTY
    | VB_NEW VB_IDENTIFIER
    | VB_LPAREN vbExpression VB_RPAREN
    ;

// JScript Code
jscriptCode
    : jsStatement*
    ;

jsStatement
    : jsVariableDeclaration
    | jsExpressionStatement
    | jsIfStatement
    | jsForStatement
    | jsWhileStatement
    | jsDoWhileStatement
    | jsSwitchStatement
    | jsFunctionDeclaration
    | jsReturnStatement
    | jsBreakStatement
    | jsContinueStatement
    | jsThrowStatement
    | jsTryStatement
    | jsBlockStatement
    | JS_NEWLINE
    ;

jsVariableDeclaration
    : JS_VAR jsVariableList JS_SEMICOLON? JS_NEWLINE?
    ;

jsVariableList
    : jsVariable (JS_COMMA jsVariable)*
    ;

jsVariable
    : JS_IDENTIFIER (JS_ASSIGN jsExpression)?
    ;

jsExpressionStatement
    : jsExpression JS_SEMICOLON? JS_NEWLINE?
    ;

jsIfStatement
    : JS_IF JS_LPAREN jsExpression JS_RPAREN jsStatement (JS_ELSE jsStatement)?
    ;

jsForStatement
    : JS_FOR JS_LPAREN (jsVariableDeclaration | jsExpression)? JS_SEMICOLON jsExpression? JS_SEMICOLON jsExpression? JS_RPAREN jsStatement
    | JS_FOR JS_LPAREN (JS_VAR)? JS_IDENTIFIER JS_IN jsExpression JS_RPAREN jsStatement
    ;

jsWhileStatement
    : JS_WHILE JS_LPAREN jsExpression JS_RPAREN jsStatement
    ;

jsDoWhileStatement
    : JS_DO jsStatement JS_WHILE JS_LPAREN jsExpression JS_RPAREN JS_SEMICOLON? JS_NEWLINE?
    ;

jsSwitchStatement
    : JS_SWITCH JS_LPAREN jsExpression JS_RPAREN JS_LBRACE jsCaseClause* (jsDefaultClause)? JS_RBRACE
    ;

jsCaseClause
    : JS_CASE jsExpression JS_COLON jsStatement*
    ;

jsDefaultClause
    : JS_DEFAULT JS_COLON jsStatement*
    ;

jsFunctionDeclaration
    : JS_FUNCTION JS_IDENTIFIER JS_LPAREN jsParameterList? JS_RPAREN jsBlockStatement
    ;

jsParameterList
    : JS_IDENTIFIER (JS_COMMA JS_IDENTIFIER)*
    ;

jsReturnStatement
    : JS_RETURN jsExpression? JS_SEMICOLON? JS_NEWLINE?
    ;

jsBreakStatement
    : JS_BREAK JS_SEMICOLON? JS_NEWLINE?
    ;

jsContinueStatement
    : JS_CONTINUE JS_SEMICOLON? JS_NEWLINE?
    ;

jsThrowStatement
    : JS_THROW jsExpression JS_SEMICOLON? JS_NEWLINE?
    ;

jsTryStatement
    : JS_TRY jsBlockStatement (jsCatchClause)? (jsFinallyClause)?
    ;

jsCatchClause
    : JS_CATCH JS_LPAREN JS_IDENTIFIER JS_RPAREN jsBlockStatement
    ;

jsFinallyClause
    : JS_FINALLY jsBlockStatement
    ;

jsBlockStatement
    : JS_LBRACE jsStatement* JS_RBRACE
    ;

jsExpression
    : jsConditionalExpression
    ;

jsConditionalExpression
    : jsLogicalOrExpression (JS_QUESTION jsExpression JS_COLON jsExpression)?
    ;

jsLogicalOrExpression
    : jsLogicalAndExpression (JS_LOGICAL_OR jsLogicalAndExpression)*
    ;

jsLogicalAndExpression
    : jsBitwiseOrExpression (JS_LOGICAL_AND jsBitwiseOrExpression)*
    ;

jsBitwiseOrExpression
    : jsBitwiseXorExpression (JS_BITWISE_OR jsBitwiseXorExpression)*
    ;

jsBitwiseXorExpression
    : jsBitwiseAndExpression (JS_BITWISE_XOR jsBitwiseAndExpression)*
    ;

jsBitwiseAndExpression
    : jsEqualityExpression (JS_BITWISE_AND jsEqualityExpression)*
    ;

jsEqualityExpression
    : jsRelationalExpression ((JS_EQ | JS_NE | JS_STRICT_EQ | JS_STRICT_NE) jsRelationalExpression)*
    ;

jsRelationalExpression
    : jsShiftExpression ((JS_LT | JS_GT | JS_LE | JS_GE | JS_IN | JS_INSTANCEOF) jsShiftExpression)*
    ;

jsShiftExpression
    : jsAdditiveExpression ((JS_LEFT_SHIFT | JS_RIGHT_SHIFT | JS_UNSIGNED_RIGHT_SHIFT) jsAdditiveExpression)*
    ;

jsAdditiveExpression
    : jsMultiplicativeExpression ((JS_PLUS | JS_MINUS) jsMultiplicativeExpression)*
    ;

jsMultiplicativeExpression
    : jsUnaryExpression ((JS_MULTIPLY | JS_DIVIDE | JS_MODULO) jsUnaryExpression)*
    ;

jsUnaryExpression
    : (JS_LOGICAL_NOT | JS_BITWISE_NOT | JS_PLUS | JS_MINUS | JS_TYPEOF | JS_VOID | JS_DELETE | JS_INCREMENT | JS_DECREMENT)? jsPostfixExpression
    ;

jsPostfixExpression
    : jsPrimaryExpression (JS_INCREMENT | JS_DECREMENT)?
    ;

jsPrimaryExpression
    : JS_IDENTIFIER (jsMemberAccess | jsCallExpression)*
    | JS_STRING_LITERAL
    | JS_NUMBER_LITERAL
    | JS_REGEX_LITERAL
    | JS_TRUE
    | JS_FALSE
    | JS_NULL
    | JS_UNDEFINED
    | JS_THIS
    | JS_NEW jsPrimaryExpression
    | JS_LPAREN jsExpression JS_RPAREN
    | jsArrayLiteral
    | jsObjectLiteral
    ;

jsMemberAccess
    : JS_DOT JS_IDENTIFIER
    | JS_LBRACKET jsExpression JS_RBRACKET
    ;

jsCallExpression
    : JS_LPAREN jsArgumentList? JS_RPAREN
    ;

jsArgumentList
    : jsExpression (JS_COMMA jsExpression)*
    ;

jsArrayLiteral
    : JS_LBRACKET (jsExpression (JS_COMMA jsExpression)*)? JS_RBRACKET
    ;

jsObjectLiteral
    : JS_LBRACE (jsPropertyAssignment (JS_COMMA jsPropertyAssignment)*)? JS_RBRACE
    ;

jsPropertyAssignment
    : (JS_IDENTIFIER | JS_STRING_LITERAL) JS_COLON jsExpression
    ;

// HTML Content
htmlContent
    : HTML_TEXT
    ;

htmlTag
    : HTML_TAG_START htmlTagContent HTML_TAG_END
    | HTML_TAG_START htmlTagContent HTML_TAG_CLOSE
    ;

htmlTagContent
    : HTML_ATTR_NAME (HTML_EQUALS HTML_ATTR_VALUE)?
    ;

// ASP Built-in Objects and Common Patterns
aspBuiltinObject
    : 'Request' | 'Response' | 'Server' | 'Session' | 'Application'
    ;

aspMethod
    : 'Write' | 'Redirect' | 'End' | 'Clear' | 'Flush' | 'CreateObject' | 'MapPath' | 'URLEncode' | 'HTMLEncode'
    ;

aspProperty
    : 'Form' | 'QueryString' | 'ServerVariables' | 'Cookies' | 'Buffer' | 'ContentType' | 'Expires' | 'Status'
    ;

