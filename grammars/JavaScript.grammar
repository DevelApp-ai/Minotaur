Grammar: CEBNF
TokenSplitter: Space
EmbeddedLanguage: true
ParentContext: HTML
ContextSensitive: true
SymbolTableSharing: hierarchical

/* JavaScript Grammar for Embedded HTML Parsing */
/* Supports ES6+ features with cross-language validation */

/* Program Structure */
<js-program> ::= <statement-list>?

<statement-list> ::= <statement> <statement-list>?

<statement> ::= <block-statement>
              | <variable-statement>
              | <function-declaration>
              | <class-declaration>
              | <if-statement>
              | <while-statement>
              | <for-statement>
              | <do-while-statement>
              | <switch-statement>
              | <try-statement>
              | <return-statement>
              | <break-statement>
              | <continue-statement>
              | <throw-statement>
              | <expression-statement>
              | <empty-statement>

/* Block Statement */
<block-statement> ::= "{" <statement-list>? "}"

/* Variable Declarations */
<variable-statement> ::= <variable-declaration> <semicolon>?
<variable-declaration> ::= <var-keyword> <variable-declarator-list>
<var-keyword> ::= "var" | "let" | "const"
<variable-declarator-list> ::= <variable-declarator> <variable-declarator-tail>?
<variable-declarator-tail> ::= "," <variable-declarator-list>
<variable-declarator> ::= @SYMBOL[variable] <identifier> <initializer>?
<initializer> ::= "=" <assignment-expression>

/* Function Declarations */
<function-declaration> ::= "function" <whitespace> @SYMBOL[function] <identifier> 
                          "(" <parameter-list>? ")" <block-statement>

<parameter-list> ::= <parameter> <parameter-tail>?
<parameter-tail> ::= "," <parameter-list>
<parameter> ::= @SYMBOL[parameter] <identifier> <default-parameter>?
<default-parameter> ::= "=" <assignment-expression>

/* Class Declarations */
<class-declaration> ::= "class" <whitespace> @SYMBOL[class] <identifier> <class-heritage>? 
                       "{" <class-body> "}"
<class-heritage> ::= "extends" <whitespace> <identifier>
<class-body> ::= <class-element>*
<class-element> ::= <method-definition> | <field-definition>
<method-definition> ::= <method-name> "(" <parameter-list>? ")" <block-statement>
<field-definition> ::= <identifier> <initializer>? <semicolon>?
<method-name> ::= <identifier> | "constructor"

/* Control Flow Statements */
<if-statement> ::= "if" <opt-whitespace> "(" <expression> ")" <statement> <else-clause>?
<else-clause> ::= "else" <whitespace> <statement>

<while-statement> ::= "while" <opt-whitespace> "(" <expression> ")" <statement>

<for-statement> ::= "for" <opt-whitespace> "(" <for-init>? ";" <expression>? ";" <expression>? ")" <statement>
<for-init> ::= <variable-declaration> | <expression>

<do-while-statement> ::= "do" <whitespace> <statement> "while" <opt-whitespace> "(" <expression> ")" <semicolon>?

<switch-statement> ::= "switch" <opt-whitespace> "(" <expression> ")" "{" <case-clauses>? "}"
<case-clauses> ::= <case-clause> <case-clauses>?
<case-clause> ::= <case-label> <statement-list>?
<case-label> ::= "case" <whitespace> <expression> ":" | "default" <opt-whitespace> ":"

<try-statement> ::= "try" <whitespace> <block-statement> <catch-clause>? <finally-clause>?
<catch-clause> ::= "catch" <opt-whitespace> "(" <identifier> ")" <block-statement>
<finally-clause> ::= "finally" <whitespace> <block-statement>

/* Jump Statements */
<return-statement> ::= "return" <return-value>? <semicolon>?
<return-value> ::= <whitespace> <expression>

<break-statement> ::= "break" <break-label>? <semicolon>?
<break-label> ::= <whitespace> <identifier>

<continue-statement> ::= "continue" <continue-label>? <semicolon>?
<continue-label> ::= <whitespace> <identifier>

<throw-statement> ::= "throw" <whitespace> <expression> <semicolon>?

/* Expression Statement */
<expression-statement> ::= <expression> <semicolon>?
<empty-statement> ::= <semicolon>

/* Expressions */
<expression> ::= <assignment-expression>

<assignment-expression> ::= <conditional-expression> <assignment-operator-expression>?
<assignment-operator-expression> ::= <assignment-operator> <assignment-expression>
<assignment-operator> ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|="

<conditional-expression> ::= <logical-or-expression> <conditional-operator-expression>?
<conditional-operator-expression> ::= "?" <assignment-expression> ":" <assignment-expression>

<logical-or-expression> ::= <logical-and-expression> <logical-or-tail>?
<logical-or-tail> ::= "||" <logical-or-expression>

<logical-and-expression> ::= <bitwise-or-expression> <logical-and-tail>?
<logical-and-tail> ::= "&&" <logical-and-expression>

<bitwise-or-expression> ::= <bitwise-xor-expression> <bitwise-or-tail>?
<bitwise-or-tail> ::= "|" <bitwise-or-expression>

<bitwise-xor-expression> ::= <bitwise-and-expression> <bitwise-xor-tail>?
<bitwise-xor-tail> ::= "^" <bitwise-xor-expression>

<bitwise-and-expression> ::= <equality-expression> <bitwise-and-tail>?
<bitwise-and-tail> ::= "&" <bitwise-and-expression>

<equality-expression> ::= <relational-expression> <equality-tail>?
<equality-tail> ::= <equality-operator> <equality-expression>
<equality-operator> ::= "==" | "!=" | "===" | "!=="

<relational-expression> ::= <shift-expression> <relational-tail>?
<relational-tail> ::= <relational-operator> <relational-expression>
<relational-operator> ::= "<" | ">" | "<=" | ">=" | "instanceof" | "in"

<shift-expression> ::= <additive-expression> <shift-tail>?
<shift-tail> ::= <shift-operator> <shift-expression>
<shift-operator> ::= "<<" | ">>" | ">>>"

<additive-expression> ::= <multiplicative-expression> <additive-tail>?
<additive-tail> ::= <additive-operator> <additive-expression>
<additive-operator> ::= "+" | "-"

<multiplicative-expression> ::= <unary-expression> <multiplicative-tail>?
<multiplicative-tail> ::= <multiplicative-operator> <multiplicative-expression>
<multiplicative-operator> ::= "*" | "/" | "%"

<unary-expression> ::= <postfix-expression>
                     | <unary-operator> <unary-expression>
                     | "delete" <whitespace> <unary-expression>
                     | "void" <whitespace> <unary-expression>
                     | "typeof" <whitespace> <unary-expression>
                     | "++" <unary-expression>
                     | "--" <unary-expression>

<unary-operator> ::= "+" | "-" | "~" | "!"

<postfix-expression> ::= <primary-expression> <postfix-tail>?
<postfix-tail> ::= <member-access> <postfix-tail>?
                 | <function-call> <postfix-tail>?
                 | <array-access> <postfix-tail>?
                 | "++" | "--"

<member-access> ::= "." <identifier>
<array-access> ::= "[" <expression> "]"

/* Cross-Language Function Calls */
<function-call> ::= "(" <argument-list>? ")"
<argument-list> ::= <argument> <argument-tail>?
<argument-tail> ::= "," <argument-list>
<argument> ::= <assignment-expression>

/* DOM API Calls with Cross-Language Validation */
<dom-function-call> ::= <get-element-by-id-call>
                      | <query-selector-call>
                      | <add-event-listener-call>

<get-element-by-id-call> ::= "document" "." "getElementById" "(" "\"" @REFERENCE[HTML.id] <identifier> "\"" ")"
<query-selector-call> ::= "document" "." "querySelector" "(" "\"" <css-selector-string> "\"" ")"
<add-event-listener-call> ::= <identifier> "." "addEventListener" "(" <string-literal> "," <function-reference> ")"

<css-selector-string> ::= @REFERENCE[CSS.selector] <string-content>
<function-reference> ::= @REFERENCE[JavaScript.function] <identifier>

/* Primary Expressions */
<primary-expression> ::= <identifier>
                       | <literal>
                       | <array-literal>
                       | <object-literal>
                       | <function-expression>
                       | <arrow-function>
                       | <parenthesized-expression>
                       | <dom-function-call>

<parenthesized-expression> ::= "(" <expression> ")"

/* Literals */
<literal> ::= <null-literal>
            | <boolean-literal>
            | <numeric-literal>
            | <string-literal>
            | <regex-literal>

<null-literal> ::= "null"
<boolean-literal> ::= "true" | "false"

<numeric-literal> ::= <decimal-literal> | <hex-literal> | <octal-literal> | <binary-literal>
<decimal-literal> ::= <integer-part> <decimal-part>? <exponent-part>?
<integer-part> ::= "0" | <non-zero-digit> <digit>*
<decimal-part> ::= "." <digit>+
<exponent-part> ::= <exponent-indicator> <sign>? <digit>+
<exponent-indicator> ::= "e" | "E"

<hex-literal> ::= "0" <hex-indicator> <hex-digit>+
<hex-indicator> ::= "x" | "X"

<octal-literal> ::= "0" <octal-digit>+
<binary-literal> ::= "0" <binary-indicator> <binary-digit>+
<binary-indicator> ::= "b" | "B"

<string-literal> ::= "\"" <double-string-content> "\"" | "'" <single-string-content> "'" | "`" <template-string-content> "`"
<double-string-content> ::= <double-string-char>*
<single-string-content> ::= <single-string-char>*
<template-string-content> ::= <template-string-char>*

<regex-literal> ::= "/" <regex-body> "/" <regex-flags>?
<regex-body> ::= <regex-char>+
<regex-flags> ::= <regex-flag>+
<regex-flag> ::= "g" | "i" | "m" | "s" | "u" | "y"

/* Array and Object Literals */
<array-literal> ::= "[" <element-list>? "]"
<element-list> ::= <array-element> <element-tail>?
<element-tail> ::= "," <element-list>?
<array-element> ::= <assignment-expression> | <empty-element>
<empty-element> ::= ""

<object-literal> ::= "{" <property-list>? "}"
<property-list> ::= <property> <property-tail>?
<property-tail> ::= "," <property-list>?
<property> ::= <property-name> ":" <assignment-expression>
<property-name> ::= <identifier> | <string-literal> | <numeric-literal>

/* Function Expressions */
<function-expression> ::= "function" <function-name>? "(" <parameter-list>? ")" <block-statement>
<function-name> ::= <whitespace> <identifier>

<arrow-function> ::= <arrow-parameters> "=>" <arrow-body>
<arrow-parameters> ::= <identifier> | "(" <parameter-list>? ")"
<arrow-body> ::= <assignment-expression> | <block-statement>

/* Identifiers and Keywords */
<identifier> ::= <identifier-start> <identifier-part>*
<identifier-start> ::= <letter> | "$" | "_"
<identifier-part> ::= <identifier-start> | <digit>

/* Character Classes */
<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
<non-zero-digit> ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
<octal-digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7"
<binary-digit> ::= "0" | "1"
<hex-digit> ::= <digit> | "A" | "B" | "C" | "D" | "E" | "F" | "a" | "b" | "c" | "d" | "e" | "f"

<letter> ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M"
           | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"
           | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m"
           | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"

<sign> ::= "+" | "-"

/* String Characters */
<double-string-char> ::= <source-char-except-double-quote-and-backslash> | <escape-sequence>
<single-string-char> ::= <source-char-except-single-quote-and-backslash> | <escape-sequence>
<template-string-char> ::= <source-char-except-backtick-and-backslash> | <escape-sequence> | <template-substitution>

<source-char-except-double-quote-and-backslash> ::= <letter> | <digit> | <space> | <safe-string-punctuation>
<source-char-except-single-quote-and-backslash> ::= <letter> | <digit> | <space> | <safe-string-punctuation> | "\""
<source-char-except-backtick-and-backslash> ::= <letter> | <digit> | <space> | <safe-string-punctuation> | "\"" | "'"

<safe-string-punctuation> ::= "!" | "#" | "$" | "%" | "&" | "(" | ")" | "*" | "+" | "," | "-" | "."
                             | "/" | ":" | ";" | "<" | "=" | ">" | "?" | "@" | "[" | "]" | "^" | "_"
                             | "{" | "|" | "}" | "~"

<escape-sequence> ::= "\\" <escape-char>
<escape-char> ::= "'" | "\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | "v" | "0"
                | "x" <hex-digit> <hex-digit>
                | "u" <hex-digit> <hex-digit> <hex-digit> <hex-digit>

<template-substitution> ::= "${" <expression> "}"

/* Regex Characters */
<regex-char> ::= <letter> | <digit> | <regex-punctuation> | <escape-sequence>
<regex-punctuation> ::= "!" | "#" | "$" | "%" | "&" | "'" | "(" | ")" | "*" | "+" | "," | "-"
                      | "." | ":" | ";" | "<" | "=" | ">" | "?" | "@" | "[" | "]" | "^" | "_"
                      | "`" | "{" | "|" | "}" | "~" | "\\" | "\""

/* Whitespace and Comments */
<space> ::= " " | "\t" | "\n" | "\r"
<whitespace> ::= <space>+
<opt-whitespace> ::= <space>*

<semicolon> ::= ";"

/* Symbol Definitions for Cross-Language Validation */
@SYMBOLS {
    function: <function-declaration>
    variable: <variable-declarator>
    class: <class-declaration>
    parameter: <parameter>
    getElementById: <get-element-by-id-call>
}

