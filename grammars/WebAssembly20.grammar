/*
 * WebAssembly 2.0 Grammar Specification (WAT - WebAssembly Text Format)
 * 
 * This grammar is designed for parsing the WebAssembly Text Format (WAT) and is suitable for a grammar marketplace.
 * It covers the full WebAssembly 2.0 specification including reference types, bulk memory operations, SIMD instructions,
 * multi-value returns, tail calls, exception handling, and all modern WebAssembly features. This grammar is based on
 * the official WebAssembly specification and includes all language features available in WebAssembly 2.0+ including
 * garbage collection, typed function references, and advanced memory management.
 */

Grammar: CEBNF
TokenSplitter: Space
Keywords: module, func, param, result, local, global, table, memory, import, export, start, elem, data, type, mut, i32, i64, f32, f64, v128, funcref, externref, anyref, eqref, i31ref, structref, arrayref, nullref, ref, null, unreachable, nop, block, loop, if, else, end, br, br_if, br_table, return, call, call_indirect, call_ref, return_call, return_call_indirect, return_call_ref, drop, select, local.get, local.set, local.tee, global.get, global.set, table.get, table.set, table.size, table.grow, table.fill, table.copy, table.init, elem.drop, memory.size, memory.grow, memory.fill, memory.copy, memory.init, data.drop, i32.load, i64.load, f32.load, f64.load, i32.load8_s, i32.load8_u, i32.load16_s, i32.load16_u, i64.load8_s, i64.load8_u, i64.load16_s, i64.load16_u, i64.load32_s, i64.load32_u, i32.store, i64.store, f32.store, f64.store, i32.store8, i32.store16, i64.store8, i64.store16, i64.store32, i32.const, i64.const, f32.const, f64.const, i32.eqz, i32.eq, i32.ne, i32.lt_s, i32.lt_u, i32.gt_s, i32.gt_u, i32.le_s, i32.le_u, i32.ge_s, i32.ge_u, i64.eqz, i64.eq, i64.ne, i64.lt_s, i64.lt_u, i64.gt_s, i64.gt_u, i64.le_s, i64.le_u, i64.ge_s, i64.ge_u, f32.eq, f32.ne, f32.lt, f32.gt, f32.le, f32.ge, f64.eq, f64.ne, f64.lt, f64.gt, f64.le, f64.ge, i32.clz, i32.ctz, i32.popcnt, i32.add, i32.sub, i32.mul, i32.div_s, i32.div_u, i32.rem_s, i32.rem_u, i32.and, i32.or, i32.xor, i32.shl, i32.shr_s, i32.shr_u, i32.rotl, i32.rotr, i64.clz, i64.ctz, i64.popcnt, i64.add, i64.sub, i64.mul, i64.div_s, i64.div_u, i64.rem_s, i64.rem_u, i64.and, i64.or, i64.xor, i64.shl, i64.shr_s, i64.shr_u, i64.rotl, i64.rotr, f32.abs, f32.neg, f32.ceil, f32.floor, f32.trunc, f32.nearest, f32.sqrt, f32.add, f32.sub, f32.mul, f32.div, f32.min, f32.max, f32.copysign, f64.abs, f64.neg, f64.ceil, f64.floor, f64.trunc, f64.nearest, f64.sqrt, f64.add, f64.sub, f64.mul, f64.div, f64.min, f64.max, f64.copysign, i32.wrap_i64, i32.trunc_f32_s, i32.trunc_f32_u, i32.trunc_f64_s, i32.trunc_f64_u, i64.extend_i32_s, i64.extend_i32_u, i64.trunc_f32_s, i64.trunc_f32_u, i64.trunc_f64_s, i64.trunc_f64_u, f32.convert_i32_s, f32.convert_i32_u, f32.convert_i64_s, f32.convert_i64_u, f32.demote_f64, f64.convert_i32_s, f64.convert_i32_u, f64.convert_i64_s, f64.convert_i64_u, f64.promote_f32, i32.reinterpret_f32, i64.reinterpret_f64, f32.reinterpret_i32, f64.reinterpret_i64, i32.extend8_s, i32.extend16_s, i64.extend8_s, i64.extend16_s, i64.extend32_s, ref.null, ref.is_null, ref.func, ref.as_non_null, ref.eq, ref.test, ref.cast, struct.new, struct.new_default, struct.get, struct.get_s, struct.get_u, struct.set, array.new, array.new_default, array.new_fixed, array.new_data, array.new_elem, array.get, array.get_s, array.get_u, array.set, array.len, array.fill, array.copy, array.init_data, array.init_elem, i31.new, i31.get_s, i31.get_u, extern.internalize, extern.externalize, try, catch, catch_all, delegate, throw, rethrow, v128.load, v128.load8x8_s, v128.load8x8_u, v128.load16x4_s, v128.load16x4_u, v128.load32x2_s, v128.load32x2_u, v128.load8_splat, v128.load16_splat, v128.load32_splat, v128.load64_splat, v128.load32_zero, v128.load64_zero, v128.store, v128.const, i8x16.shuffle, i8x16.swizzle, i8x16.splat, i8x16.extract_lane_s, i8x16.extract_lane_u, i8x16.replace_lane, i16x8.splat, i16x8.extract_lane_s, i16x8.extract_lane_u, i16x8.replace_lane, i32x4.splat, i32x4.extract_lane, i32x4.replace_lane, i64x2.splat, i64x2.extract_lane, i64x2.replace_lane, f32x4.splat, f32x4.extract_lane, f32x4.replace_lane, f64x2.splat, f64x2.extract_lane, f64x2.replace_lane

<module> ::= "(" "module" <id>? <modulefield>* ")"

<modulefield> ::= <type> | <import> | <func> | <table> | <memory> | <global> | <export> | <start> | <elem> | <data>

/* Type definitions */
<type> ::= "(" "type" <id>? <functype> ")"

<functype> ::= "(" "func" <param>* <result>* ")"

<param> ::= "(" "param" <id>? <valtype> ")" | "(" "param" <valtype>* ")"

<result> ::= "(" "result" <valtype> ")" | "(" "result" <valtype>* ")"

/* Value types */
<valtype> ::= <numtype> | <vectype> | <reftype>

<numtype> ::= "i32" | "i64" | "f32" | "f64"

<vectype> ::= "v128"

<reftype> ::= <heaptype> | "(" "ref" <null>? <heaptype> ")"

<heaptype> ::= "func" | "extern" | "any" | "eq" | "i31" | "struct" | "array" | "none" | "noextern" | "nofunc" | <typeidx>

<null> ::= "null"

/* Reference types (WebAssembly 2.0) */
<funcref> ::= "funcref"

<externref> ::= "externref"

<anyref> ::= "anyref"

<eqref> ::= "eqref"

<i31ref> ::= "i31ref"

<structref> ::= "structref"

<arrayref> ::= "arrayref"

<nullref> ::= "nullref"

/* Limits */
<limits> ::= <u32> | <u32> <u32>

/* Memory types */
<memtype> ::= <limits>

/* Table types */
<tabletype> ::= <limits> <reftype>

/* Global types */
<globaltype> ::= <valtype> | "(" "mut" <valtype> ")"

/* Imports */
<import> ::= "(" "import" <name> <name> <importdesc> ")"

<importdesc> ::= "(" "func" <id>? <typeuse> ")" | "(" "table" <id>? <tabletype> ")" | "(" "memory" <id>? <memtype> ")" | "(" "global" <id>? <globaltype> ")"

/* Functions */
<func> ::= "(" "func" <id>? <typeuse> <local>* <instr>* ")"

<typeuse> ::= "(" "type" <typeidx> ")" | <functype>

<local> ::= "(" "local" <id>? <valtype> ")" | "(" "local" <valtype>* ")"

/* Tables */
<table> ::= "(" "table" <id>? <tabletype> ")" | "(" "table" <id>? <reftype> "(" "elem" <expr>* ")" ")"

/* Memories */
<memory> ::= "(" "memory" <id>? <memtype> ")" | "(" "memory" <id>? "(" "data" <datastring>* ")" ")"

/* Globals */
<global> ::= "(" "global" <id>? <globaltype> <expr> ")"

/* Exports */
<export> ::= "(" "export" <name> <exportdesc> ")"

<exportdesc> ::= "(" "func" <funcidx> ")" | "(" "table" <tableidx> ")" | "(" "memory" <memidx> ")" | "(" "global" <globalidx> ")"

/* Start function */
<start> ::= "(" "start" <funcidx> ")"

/* Element segments */
<elem> ::= "(" "elem" <tableidx>? <offset>? <reftype>? <elemlist> ")" | "(" "elem" "declare" <reftype>? <elemlist> ")"

<elemlist> ::= <reftype> <expr>* | "func" <funcidx>*

<offset> ::= "(" "offset" <expr> ")"

/* Data segments */
<data> ::= "(" "data" <memidx>? <offset>? <datastring>* ")"

<datastring> ::= <string>

/* Instructions */
<instr> ::= <plaininstr> | <blockinstr>

<plaininstr> ::= <unreachable> | <nop> | <drop> | <select> | <br> | <br_if> | <br_table> | <return> | <call> | <call_indirect> | <call_ref> | <return_call> | <return_call_indirect> | <return_call_ref> | <localinstr> | <globalinstr> | <tableinstr> | <meminstr> | <numinstr> | <vecinstr> | <refinstr> | <structinstr> | <arrayinstr> | <i31instr> | <externinstr> | <exninstr>

<blockinstr> ::= <block> | <loop> | <if>

/* Control instructions */
<unreachable> ::= "unreachable"

<nop> ::= "nop"

<block> ::= "(" "block" <id>? <blocktype> <instr>* ")"

<loop> ::= "(" "loop" <id>? <blocktype> <instr>* ")"

<if> ::= "(" "if" <id>? <blocktype> <instr>* ")" | "(" "if" <id>? <blocktype> <instr>* "(" "else" <instr>* ")" ")"

<blocktype> ::= <typeidx> | <valtype>? | <functype>

<br> ::= "br" <labelidx>

<br_if> ::= "br_if" <labelidx>

<br_table> ::= "br_table" <labelidx>* <labelidx>

<return> ::= "return"

<call> ::= "call" <funcidx>

<call_indirect> ::= "call_indirect" <tableidx>? <typeuse>

<call_ref> ::= "call_ref" <typeidx>

/* Tail call instructions (WebAssembly 2.0) */
<return_call> ::= "return_call" <funcidx>

<return_call_indirect> ::= "return_call_indirect" <tableidx>? <typeuse>

<return_call_ref> ::= "return_call_ref" <typeidx>

/* Parametric instructions */
<drop> ::= "drop"

<select> ::= "select" <valtype>*

/* Variable instructions */
<localinstr> ::= <local_get> | <local_set> | <local_tee>

<local_get> ::= "local.get" <localidx>

<local_set> ::= "local.set" <localidx>

<local_tee> ::= "local.tee" <localidx>

<globalinstr> ::= <global_get> | <global_set>

<global_get> ::= "global.get" <globalidx>

<global_set> ::= "global.set" <globalidx>

/* Table instructions */
<tableinstr> ::= <table_get> | <table_set> | <table_size> | <table_grow> | <table_fill> | <table_copy> | <table_init> | <elem_drop>

<table_get> ::= "table.get" <tableidx>?

<table_set> ::= "table.set" <tableidx>?

<table_size> ::= "table.size" <tableidx>?

<table_grow> ::= "table.grow" <tableidx>?

<table_fill> ::= "table.fill" <tableidx>?

<table_copy> ::= "table.copy" <tableidx>? <tableidx>?

<table_init> ::= "table.init" <tableidx>? <elemidx>

<elem_drop> ::= "elem.drop" <elemidx>

/* Memory instructions */
<meminstr> ::= <load> | <store> | <memory_size> | <memory_grow> | <memory_fill> | <memory_copy> | <memory_init> | <data_drop>

<load> ::= <loadop> <memarg>

<loadop> ::= "i32.load" | "i64.load" | "f32.load" | "f64.load" | "i32.load8_s" | "i32.load8_u" | "i32.load16_s" | "i32.load16_u" | "i64.load8_s" | "i64.load8_u" | "i64.load16_s" | "i64.load16_u" | "i64.load32_s" | "i64.load32_u"

<store> ::= <storeop> <memarg>

<storeop> ::= "i32.store" | "i64.store" | "f32.store" | "f64.store" | "i32.store8" | "i32.store16" | "i64.store8" | "i64.store16" | "i64.store32"

<memarg> ::= <offset>? <align>?

<offset> ::= "offset=" <u32>

<align> ::= "align=" <u32>

<memory_size> ::= "memory.size" <memidx>?

<memory_grow> ::= "memory.grow" <memidx>?

<memory_fill> ::= "memory.fill" <memidx>?

<memory_copy> ::= "memory.copy" <memidx>? <memidx>?

<memory_init> ::= "memory.init" <memidx>? <dataidx>

<data_drop> ::= "data.drop" <dataidx>

/* Numeric instructions */
<numinstr> ::= <const> | <unop> | <binop> | <testop> | <relop> | <cvtop>

<const> ::= <numtype> ".const" <num>

<unop> ::= <iunop> | <funop>

<iunop> ::= "i32.clz" | "i32.ctz" | "i32.popcnt" | "i64.clz" | "i64.ctz" | "i64.popcnt"

<funop> ::= "f32.abs" | "f32.neg" | "f32.ceil" | "f32.floor" | "f32.trunc" | "f32.nearest" | "f32.sqrt" | "f64.abs" | "f64.neg" | "f64.ceil" | "f64.floor" | "f64.trunc" | "f64.nearest" | "f64.sqrt"

<binop> ::= <ibinop> | <fbinop>

<ibinop> ::= "i32.add" | "i32.sub" | "i32.mul" | "i32.div_s" | "i32.div_u" | "i32.rem_s" | "i32.rem_u" | "i32.and" | "i32.or" | "i32.xor" | "i32.shl" | "i32.shr_s" | "i32.shr_u" | "i32.rotl" | "i32.rotr" | "i64.add" | "i64.sub" | "i64.mul" | "i64.div_s" | "i64.div_u" | "i64.rem_s" | "i64.rem_u" | "i64.and" | "i64.or" | "i64.xor" | "i64.shl" | "i64.shr_s" | "i64.shr_u" | "i64.rotl" | "i64.rotr"

<fbinop> ::= "f32.add" | "f32.sub" | "f32.mul" | "f32.div" | "f32.min" | "f32.max" | "f32.copysign" | "f64.add" | "f64.sub" | "f64.mul" | "f64.div" | "f64.min" | "f64.max" | "f64.copysign"

<testop> ::= <itestop>

<itestop> ::= "i32.eqz" | "i64.eqz"

<relop> ::= <irelop> | <frelop>

<irelop> ::= "i32.eq" | "i32.ne" | "i32.lt_s" | "i32.lt_u" | "i32.gt_s" | "i32.gt_u" | "i32.le_s" | "i32.le_u" | "i32.ge_s" | "i32.ge_u" | "i64.eq" | "i64.ne" | "i64.lt_s" | "i64.lt_u" | "i64.gt_s" | "i64.gt_u" | "i64.le_s" | "i64.le_u" | "i64.ge_s" | "i64.ge_u"

<frelop> ::= "f32.eq" | "f32.ne" | "f32.lt" | "f32.gt" | "f32.le" | "f32.ge" | "f64.eq" | "f64.ne" | "f64.lt" | "f64.gt" | "f64.le" | "f64.ge"

<cvtop> ::= "i32.wrap_i64" | "i32.trunc_f32_s" | "i32.trunc_f32_u" | "i32.trunc_f64_s" | "i32.trunc_f64_u" | "i64.extend_i32_s" | "i64.extend_i32_u" | "i64.trunc_f32_s" | "i64.trunc_f32_u" | "i64.trunc_f64_s" | "i64.trunc_f64_u" | "f32.convert_i32_s" | "f32.convert_i32_u" | "f32.convert_i64_s" | "f32.convert_i64_u" | "f32.demote_f64" | "f64.convert_i32_s" | "f64.convert_i32_u" | "f64.convert_i64_s" | "f64.convert_i64_u" | "f64.promote_f32" | "i32.reinterpret_f32" | "i64.reinterpret_f64" | "f32.reinterpret_i32" | "f64.reinterpret_i64" | "i32.extend8_s" | "i32.extend16_s" | "i64.extend8_s" | "i64.extend16_s" | "i64.extend32_s"

/* Vector instructions (SIMD - WebAssembly 2.0) */
<vecinstr> ::= <vload> | <vstore> | <vconst> | <vshuffle> | <vswizzle> | <vsplat> | <vextract> | <vreplace> | <vunop> | <vbinop> | <vtestop> | <vrelop> | <vcvtop>

<vload> ::= <vloadop> <memarg>

<vloadop> ::= "v128.load" | "v128.load8x8_s" | "v128.load8x8_u" | "v128.load16x4_s" | "v128.load16x4_u" | "v128.load32x2_s" | "v128.load32x2_u" | "v128.load8_splat" | "v128.load16_splat" | "v128.load32_splat" | "v128.load64_splat" | "v128.load32_zero" | "v128.load64_zero"

<vstore> ::= "v128.store" <memarg>

<vconst> ::= "v128.const" <i8>* | "v128.const" <i16>* | "v128.const" <i32>* | "v128.const" <i64>* | "v128.const" <f32>* | "v128.const" <f64>*

<vshuffle> ::= "i8x16.shuffle" <laneidx>*

<vswizzle> ::= "i8x16.swizzle"

<vsplat> ::= <shape> ".splat"

<vextract> ::= <shape> ".extract_lane" <laneidx> | <shape> ".extract_lane_s" <laneidx> | <shape> ".extract_lane_u" <laneidx>

<vreplace> ::= <shape> ".replace_lane" <laneidx>

<shape> ::= "i8x16" | "i16x8" | "i32x4" | "i64x2" | "f32x4" | "f64x2"

<vunop> ::= <shape> "." <vunop_name>

<vunop_name> ::= "abs" | "neg" | "sqrt" | "ceil" | "floor" | "trunc" | "nearest" | "not" | "popcnt"

<vbinop> ::= <shape> "." <vbinop_name>

<vbinop_name> ::= "add" | "sub" | "mul" | "div" | "min" | "max" | "pmin" | "pmax" | "and" | "or" | "xor" | "andnot" | "avgr_u" | "q15mulr_sat_s"

<vtestop> ::= <shape> "." <vtestop_name>

<vtestop_name> ::= "all_true" | "any_true"

<vrelop> ::= <shape> "." <vrelop_name>

<vrelop_name> ::= "eq" | "ne" | "lt" | "le" | "gt" | "ge" | "lt_s" | "lt_u" | "le_s" | "le_u" | "gt_s" | "gt_u" | "ge_s" | "ge_u"

<vcvtop> ::= <shape> "." <vcvtop_name> | <shape> "." <vcvtop_name> "_" <shape>

<vcvtop_name> ::= "convert" | "trunc" | "extend" | "demote" | "promote" | "narrow" | "widen"

/* Reference instructions (WebAssembly 2.0) */
<refinstr> ::= <ref_null> | <ref_is_null> | <ref_func> | <ref_as_non_null> | <ref_eq> | <ref_test> | <ref_cast>

<ref_null> ::= "ref.null" <heaptype>

<ref_is_null> ::= "ref.is_null"

<ref_func> ::= "ref.func" <funcidx>

<ref_as_non_null> ::= "ref.as_non_null"

<ref_eq> ::= "ref.eq"

<ref_test> ::= "ref.test" <reftype>

<ref_cast> ::= "ref.cast" <reftype>

/* Struct instructions (Garbage Collection - WebAssembly 2.0) */
<structinstr> ::= <struct_new> | <struct_new_default> | <struct_get> | <struct_get_s> | <struct_get_u> | <struct_set>

<struct_new> ::= "struct.new" <typeidx>

<struct_new_default> ::= "struct.new_default" <typeidx>

<struct_get> ::= "struct.get" <typeidx> <fieldidx>

<struct_get_s> ::= "struct.get_s" <typeidx> <fieldidx>

<struct_get_u> ::= "struct.get_u" <typeidx> <fieldidx>

<struct_set> ::= "struct.set" <typeidx> <fieldidx>

/* Array instructions (Garbage Collection - WebAssembly 2.0) */
<arrayinstr> ::= <array_new> | <array_new_default> | <array_new_fixed> | <array_new_data> | <array_new_elem> | <array_get> | <array_get_s> | <array_get_u> | <array_set> | <array_len> | <array_fill> | <array_copy> | <array_init_data> | <array_init_elem>

<array_new> ::= "array.new" <typeidx>

<array_new_default> ::= "array.new_default" <typeidx>

<array_new_fixed> ::= "array.new_fixed" <typeidx> <u32>

<array_new_data> ::= "array.new_data" <typeidx> <dataidx>

<array_new_elem> ::= "array.new_elem" <typeidx> <elemidx>

<array_get> ::= "array.get" <typeidx>

<array_get_s> ::= "array.get_s" <typeidx>

<array_get_u> ::= "array.get_u" <typeidx>

<array_set> ::= "array.set" <typeidx>

<array_len> ::= "array.len"

<array_fill> ::= "array.fill" <typeidx>

<array_copy> ::= "array.copy" <typeidx> <typeidx>

<array_init_data> ::= "array.init_data" <typeidx> <dataidx>

<array_init_elem> ::= "array.init_elem" <typeidx> <elemidx>

/* i31 instructions (Garbage Collection - WebAssembly 2.0) */
<i31instr> ::= <i31_new> | <i31_get_s> | <i31_get_u>

<i31_new> ::= "i31.new"

<i31_get_s> ::= "i31.get_s"

<i31_get_u> ::= "i31.get_u"

/* External reference instructions (WebAssembly 2.0) */
<externinstr> ::= <extern_internalize> | <extern_externalize>

<extern_internalize> ::= "extern.internalize"

<extern_externalize> ::= "extern.externalize"

/* Exception handling instructions (WebAssembly 2.0) */
<exninstr> ::= <try> | <catch> | <catch_all> | <delegate> | <throw> | <rethrow>

<try> ::= "(" "try" <id>? <blocktype> <instr>* <catch>* <catch_all>? ")" | "(" "try" <id>? <blocktype> <instr>* "(" "delegate" <labelidx> ")" ")"

<catch> ::= "(" "catch" <tagidx> <instr>* ")"

<catch_all> ::= "(" "catch_all" <instr>* ")"

<delegate> ::= "(" "delegate" <labelidx> ")"

<throw> ::= "throw" <tagidx>

<rethrow> ::= "rethrow" <labelidx>

/* Tag definitions (Exception handling) */
<tag> ::= "(" "tag" <id>? <tagtype> ")"

<tagtype> ::= <functype>

/* Expressions */
<expr> ::= <instr>*

/* Folded expressions */
<foldedinstr> ::= "(" <plaininstr> <foldedinstr>* ")" | "(" <blockinstr> ")"

/* Indices */
<typeidx> ::= <u32> | <id>

<funcidx> ::= <u32> | <id>

<tableidx> ::= <u32> | <id>

<memidx> ::= <u32> | <id>

<globalidx> ::= <u32> | <id>

<elemidx> ::= <u32> | <id>

<dataidx> ::= <u32> | <id>

<localidx> ::= <u32> | <id>

<labelidx> ::= <u32> | <id>

<fieldidx> ::= <u32> | <id>

<tagidx> ::= <u32> | <id>

<laneidx> ::= <u8>

/* Identifiers */
<id> ::= "$" <idchar>+

<idchar> ::= <letter> | <digit> | "_" | "." | "+" | "-" | "*" | "/" | "\" | "^" | "~" | "=" | "<" | ">" | "!" | "?" | "@" | "#" | "$" | "%" | "&" | "|" | ":" | "`"

/* Names */
<name> ::= <string>

/* Numbers */
<num> ::= <int> | <float>

<u32> ::= <int>

<u64> ::= <int>

<s32> ::= <int>

<s64> ::= <int>

<i8> ::= <int>

<i16> ::= <int>

<i32> ::= <int>

<i64> ::= <int>

<f32> ::= <float>

<f64> ::= <float>

<int> ::= <sign>? <num_val>

<float> ::= <sign>? <num_val> | <sign>? <num_val> "." <num_val>? | <sign>? <num_val> "." <num_val>? <exp> | <sign>? "inf" | <sign>? "nan" | <sign>? "nan:" <hexnum>

<sign> ::= "+" | "-"

<num_val> ::= <digit>+ | "0x" <hexdigit>+

<exp> ::= ( "e" | "E" ) <sign>? <digit>+

<hexnum> ::= "0x" <hexdigit>+

<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

<hexdigit> ::= <digit> | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F"

<letter> ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"

/* Strings */
<string> ::= "\"" <stringchar>* "\""

<stringchar> ::= <stringelem> | <stringescape>

<stringelem> ::= <char>

<stringescape> ::= "\" <char> | "\" <hexdigit> <hexdigit> | "\u{" <hexnum> "}"

<char> ::= /* any Unicode character except " and \ and control characters */

/* Comments */
<linecomment> ::= ";;" <linechar>* <newline>

<blockcomment> ::= "(;" <blockchar>* ";)"

<linechar> ::= /* any character except newline */

<blockchar> ::= /* any character including nested block comments */

<newline> ::= /* newline character */

/* White space */
<space> ::= " " | "\t" | "\n" | "\r"

/* WebAssembly 2.0 specific features */

/* Multiple memories (WebAssembly 2.0) */
<multimem> ::= <memory>+

/* Typed function references (WebAssembly 2.0) */
<typed_funcref> ::= "(" "ref" <functype> ")"

/* Extended constant expressions (WebAssembly 2.0) */
<extended_const_expr> ::= <const_instr>+

<const_instr> ::= <const> | <global_get> | <ref_null> | <ref_func> | <struct_new> | <array_new_fixed>

/* Relaxed SIMD (WebAssembly 2.0) */
<relaxed_simd> ::= <relaxed_madd> | <relaxed_nmadd> | <relaxed_laneselect> | <relaxed_swizzle>

<relaxed_madd> ::= <shape> ".relaxed_madd"

<relaxed_nmadd> ::= <shape> ".relaxed_nmadd"

<relaxed_laneselect> ::= <shape> ".relaxed_laneselect"

<relaxed_swizzle> ::= "i8x16.relaxed_swizzle"

/* Custom annotation syntax (WebAssembly 2.0) */
<annotation> ::= "(@" <annotation_id> <annotation_body>* ")"

<annotation_id> ::= <id>

<annotation_body> ::= <annotation> | <string> | <num> | <id>

/* Branch hinting (WebAssembly 2.0) */
<branch_hint> ::= "(@" "likely" ")" | "(@" "unlikely" ")"

<br_hint> ::= "br" <labelidx> <branch_hint>?

<br_if_hint> ::= "br_if" <labelidx> <branch_hint>?

/* JS String Builtins (WebAssembly 2.0) */
<string_builtin> ::= <string_new> | <string_const> | <string_measure> | <string_encode> | <string_concat> | <string_eq> | <string_is_usv_sequence> | <string_new_lossy_utf8_array> | <string_new_wtf8_array> | <string_new_wtf16_array> | <string_encode_lossy_utf8_array> | <string_encode_wtf8_array> | <string_encode_wtf16_array>

<string_new> ::= "string.new_utf8" | "string.new_wtf16" | "string.new_lossy_utf8" | "string.new_wtf8"

<string_const> ::= "string.const" <string>

<string_measure> ::= "string.measure_utf8" | "string.measure_wtf8" | "string.measure_wtf16"

<string_encode> ::= "string.encode_utf8" | "string.encode_lossy_utf8" | "string.encode_wtf8" | "string.encode_wtf16"

<string_concat> ::= "string.concat"

<string_eq> ::= "string.eq"

<string_is_usv_sequence> ::= "string.is_usv_sequence"

<string_new_lossy_utf8_array> ::= "string.new_lossy_utf8_array"

<string_new_wtf8_array> ::= "string.new_wtf8_array"

<string_new_wtf16_array> ::= "string.new_wtf16_array"

<string_encode_lossy_utf8_array> ::= "string.encode_lossy_utf8_array"

<string_encode_wtf8_array> ::= "string.encode_wtf8_array"

<string_encode_wtf16_array> ::= "string.encode_wtf16_array"

/* Memory64 (WebAssembly 2.0) */
<memory64> ::= "memory64"

<mem64type> ::= <limits64>

<limits64> ::= <u64> | <u64> <u64>

<load64> ::= <loadop64> <memarg64>

<store64> ::= <storeop64> <memarg64>

<loadop64> ::= "i64.load" | "i32.load" | "f64.load" | "f32.load" | "i32.load8_s" | "i32.load8_u" | "i32.load16_s" | "i32.load16_u" | "i64.load8_s" | "i64.load8_u" | "i64.load16_s" | "i64.load16_u" | "i64.load32_s" | "i64.load32_u"

<storeop64> ::= "i64.store" | "i32.store" | "f64.store" | "f32.store" | "i32.store8" | "i32.store16" | "i64.store8" | "i64.store16" | "i64.store32"

<memarg64> ::= <offset64>? <align>?

<offset64> ::= "offset=" <u64>

/* Threads (WebAssembly 2.0) */
<atomic_instr> ::= <atomic_load> | <atomic_store> | <atomic_rmw> | <atomic_cmpxchg> | <atomic_wait> | <atomic_notify> | <atomic_fence>

<atomic_load> ::= <numtype> ".atomic.load" <memarg> | <numtype> ".atomic.load8_u" <memarg> | <numtype> ".atomic.load16_u" <memarg> | "i64.atomic.load32_u" <memarg>

<atomic_store> ::= <numtype> ".atomic.store" <memarg> | <numtype> ".atomic.store8" <memarg> | <numtype> ".atomic.store16" <memarg> | "i64.atomic.store32" <memarg>

<atomic_rmw> ::= <numtype> ".atomic.rmw." <rmwop> <memarg> | <numtype> ".atomic.rmw8." <rmwop> "_u" <memarg> | <numtype> ".atomic.rmw16." <rmwop> "_u" <memarg> | "i64.atomic.rmw32." <rmwop> "_u" <memarg>

<rmwop> ::= "add" | "sub" | "and" | "or" | "xor" | "xchg"

<atomic_cmpxchg> ::= <numtype> ".atomic.rmw.cmpxchg" <memarg> | <numtype> ".atomic.rmw8.cmpxchg_u" <memarg> | <numtype> ".atomic.rmw16.cmpxchg_u" <memarg> | "i64.atomic.rmw32.cmpxchg_u" <memarg>

<atomic_wait> ::= <numtype> ".atomic.wait" <memarg>

<atomic_notify> ::= "atomic.notify" <memarg>

<atomic_fence> ::= "atomic.fence"

/* Bulk memory operations (WebAssembly 2.0) */
<bulk_memory> ::= <memory_fill> | <memory_copy> | <memory_init> | <data_drop> | <table_fill> | <table_copy> | <table_init> | <elem_drop>

/* Multi-value (WebAssembly 2.0) */
<multi_value> ::= <result>*

/* Non-trapping float-to-int conversions (WebAssembly 2.0) */
<nontrapping_cvtop> ::= "i32.trunc_sat_f32_s" | "i32.trunc_sat_f32_u" | "i32.trunc_sat_f64_s" | "i32.trunc_sat_f64_u" | "i64.trunc_sat_f32_s" | "i64.trunc_sat_f32_u" | "i64.trunc_sat_f64_s" | "i64.trunc_sat_f64_u"

/* Sign extension operators (WebAssembly 2.0) */
<sign_extension> ::= "i32.extend8_s" | "i32.extend16_s" | "i64.extend8_s" | "i64.extend16_s" | "i64.extend32_s"

/* Component model (WebAssembly 2.0) */
<component> ::= "(" "component" <id>? <componentfield>* ")"

<componentfield> ::= <core_module> | <component_import> | <component_export> | <component_func> | <component_type> | <component_instance>

<core_module> ::= "(" "core" "module" <id>? <module> ")"

<component_import> ::= "(" "import" <name> <component_importdesc> ")"

<component_importdesc> ::= "(" "func" <id>? <component_functype> ")" | "(" "instance" <id>? <component_instancetype> ")"

<component_export> ::= "(" "export" <name> <component_exportdesc> ")"

<component_exportdesc> ::= "(" "func" <funcidx> ")" | "(" "instance" <instanceidx> ")"

<component_func> ::= "(" "func" <id>? <component_functype> <component_func_body> ")"

<component_functype> ::= "(" "func" <component_param>* <component_result>* ")"

<component_param> ::= "(" "param" <id>? <component_valtype> ")"

<component_result> ::= "(" "result" <component_valtype> ")"

<component_valtype> ::= <core_valtype> | <component_defined_type>

<core_valtype> ::= "bool" | "s8" | "u8" | "s16" | "u16" | "s32" | "u32" | "s64" | "u64" | "f32" | "f64" | "char" | "string"

<component_defined_type> ::= <record_type> | <variant_type> | <list_type> | <tuple_type> | <flags_type> | <enum_type> | <union_type> | <option_type> | <result_type>

<record_type> ::= "(" "record" <record_field>* ")"

<record_field> ::= "(" "field" <name> <component_valtype> ")"

<variant_type> ::= "(" "variant" <variant_case>* ")"

<variant_case> ::= "(" "case" <name> <component_valtype>? ")"

<list_type> ::= "(" "list" <component_valtype> ")"

<tuple_type> ::= "(" "tuple" <component_valtype>* ")"

<flags_type> ::= "(" "flags" <name>* ")"

<enum_type> ::= "(" "enum" <name>* ")"

<union_type> ::= "(" "union" <component_valtype>* ")"

<option_type> ::= "(" "option" <component_valtype> ")"

<result_type> ::= "(" "result" <component_valtype>? <component_valtype>? ")"

<component_func_body> ::= <component_instr>*

<component_instr> ::= <component_call> | <component_lift> | <component_lower>

<component_call> ::= "call" <funcidx>

<component_lift> ::= "lift_core_func" <funcidx>

<component_lower> ::= "lower_component_func" <funcidx>

<component_type> ::= "(" "type" <id>? <component_defined_type> ")"

<component_instance> ::= "(" "instance" <id>? <component_instancetype> ")"

<component_instancetype> ::= "(" "instance" <component_instancefield>* ")"

<component_instancefield> ::= "(" "export" <name> <component_exportdesc> ")"

<instanceidx> ::= <u32> | <id>

/* Advanced features */

/* Custom sections */
<custom_section> ::= "(" "@custom" <name> <custom_data> ")"

<custom_data> ::= <string>

/* Debugging information */
<debug_info> ::= "(" "@name" <name_map> ")" | "(" "@source" <source_map> ")"

<name_map> ::= <name_entry>*

<name_entry> ::= "(" <u32> <name> ")"

<source_map> ::= <source_entry>*

<source_entry> ::= "(" <u32> <name> <u32> <u32> ")"

/* Profiling hooks */
<profiling_hook> ::= "(" "@profile" <profile_type> ")"

<profile_type> ::= "enter" | "exit" | "sample"

/* Optimization hints */
<optimization_hint> ::= "(" "@optimize" <optimization_type> ")"

<optimization_type> ::= "size" | "speed" | "none"

/* Linking information */
<linking_info> ::= "(" "@link" <link_entry>* ")"

<link_entry> ::= "(" "symbol" <name> <symbol_type> ")" | "(" "segment" <name> <segment_info> ")"

<symbol_type> ::= "function" | "data" | "global" | "section"

<segment_info> ::= <u32> <u32> <u32>

/* WebAssembly Interface Types (WIT) integration */
<wit_integration> ::= "(" "@wit" <wit_definition> ")"

<wit_definition> ::= <wit_world> | <wit_interface>

<wit_world> ::= "(" "world" <name> <wit_world_item>* ")"

<wit_world_item> ::= <wit_import> | <wit_export>

<wit_import> ::= "(" "import" <name> <wit_extern> ")"

<wit_export> ::= "(" "export" <name> <wit_extern> ")"

<wit_extern> ::= <wit_func> | <wit_interface_ref>

<wit_func> ::= "(" "func" <wit_func_type> ")"

<wit_func_type> ::= "(" "param" <wit_type>* ")" "(" "result" <wit_type>* ")"

<wit_type> ::= <wit_primitive> | <wit_defined>

<wit_primitive> ::= "bool" | "u8" | "u16" | "u32" | "u64" | "s8" | "s16" | "s32" | "s64" | "f32" | "f64" | "char" | "string"

<wit_defined> ::= <wit_list> | <wit_record> | <wit_variant> | <wit_enum> | <wit_flags> | <wit_tuple> | <wit_option> | <wit_result>

<wit_list> ::= "(" "list" <wit_type> ")"

<wit_record> ::= "(" "record" <wit_field>* ")"

<wit_field> ::= "(" <name> <wit_type> ")"

<wit_variant> ::= "(" "variant" <wit_case>* ")"

<wit_case> ::= "(" <name> <wit_type>? ")"

<wit_enum> ::= "(" "enum" <name>* ")"

<wit_flags> ::= "(" "flags" <name>* ")"

<wit_tuple> ::= "(" "tuple" <wit_type>* ")"

<wit_option> ::= "(" "option" <wit_type> ")"

<wit_result> ::= "(" "result" <wit_type>? <wit_type>? ")"

<wit_interface> ::= "(" "interface" <name> <wit_interface_item>* ")"

<wit_interface_item> ::= <wit_use> | <wit_type_def> | <wit_func_def>

<wit_use> ::= "(" "use" <wit_interface_ref> "." <name> ")"

<wit_type_def> ::= "(" "type" <name> <wit_type> ")"

<wit_func_def> ::= "(" "func" <name> <wit_func_type> ")"

<wit_interface_ref> ::= <name>

/* Performance monitoring */
<performance_monitor> ::= "(" "@perf" <perf_counter> ")"

<perf_counter> ::= "cycles" | "instructions" | "cache_misses" | "branch_misses"

/* Security annotations */
<security_annotation> ::= "(" "@security" <security_policy> ")"

<security_policy> ::= "trusted" | "untrusted" | "sandbox" | "isolate"

/* Memory protection */
<memory_protection> ::= "(" "@protect" <protection_type> ")"

<protection_type> ::= "read_only" | "write_only" | "execute_only" | "no_access"

/* Resource limits */
<resource_limit> ::= "(" "@limit" <resource_type> <u32> ")"

<resource_type> ::= "memory" | "table" | "stack" | "heap" | "time" | "fuel"

/* Validation directives */
<validation_directive> ::= "(" "@validate" <validation_rule> ")"

<validation_rule> ::= "strict" | "relaxed" | "experimental"

/* Compilation targets */
<compilation_target> ::= "(" "@target" <target_arch> <target_features>* ")"

<target_arch> ::= "x86_64" | "aarch64" | "riscv64" | "wasm32" | "wasm64"

<target_features> ::= "simd" | "threads" | "atomics" | "bulk_memory" | "reference_types" | "gc" | "exception_handling"

