name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'copilot/**' ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_PATH: 'src/Minotaur.sln'
  PROJECT_PATH: 'src/Minotaur/Minotaur.csproj'

jobs:
  calculate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gitversion.outputs.SemVer }}
      prerelease: ${{ steps.gitversion.outputs.PreReleaseTag }}
      full-version: ${{ steps.gitversion.outputs.FullSemVer }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0
      with:
        versionSpec: '5.x'

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0
      with:
        useConfigFile: true

    - name: Display Version
      run: |
        echo "Version: ${{ steps.gitversion.outputs.SemVer }}"
        echo "PreReleaseTag: ${{ steps.gitversion.outputs.PreReleaseTag }}"
        echo "FullSemVer: ${{ steps.gitversion.outputs.FullSemVer }}"

  build-and-test:
    runs-on: ubuntu-latest
    needs: calculate-version
    outputs:
      test-results: ${{ steps.test.outputs.test-results }}
      coverage-results: ${{ steps.test.outputs.coverage-results }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build solution
      run: |
        dotnet build ${{ env.SOLUTION_PATH }} \
          --configuration Release \
          --no-restore \
          -p:Version=${{ needs.calculate-version.outputs.version }} \
          -p:PackageVersion=${{ needs.calculate-version.outputs.full-version }}

    - name: Run tests with coverage
      id: test
      run: |
        dotnet test ${{ env.SOLUTION_PATH }} \
          --configuration Release \
          --no-build \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults/ \
          --logger "trx;LogFileName=test-results.trx"

    - name: Generate coverage report
      if: always()
      uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
      with:
        reports: './TestResults/**/coverage.cobertura.xml'
        targetdir: './CoverageReport'
        reporttypes: 'Html;JsonSummary'

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          TestResults/**/*.xml
          TestResults/**/*.trx

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: CoverageReport/

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: [calculate-version, build-and-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
    
    - name: Build for analysis
      run: |
        dotnet build ${{ env.SOLUTION_PATH }} \
          --no-restore \
          --configuration Release \
          -p:Version=${{ needs.calculate-version.outputs.version }} \
          -p:PackageVersion=${{ needs.calculate-version.outputs.full-version }}
    
    - name: Run security analysis
      run: |
        dotnet list ${{ env.SOLUTION_PATH }} package --vulnerable --include-transitive || true
    
    - name: Check for outdated packages
      run: |
        dotnet list ${{ env.SOLUTION_PATH }} package --outdated || true

  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    needs: calculate-version
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Install dotnet format tool
      run: dotnet tool install -g dotnet-format
    
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
    
    - name: Check code formatting
      run: dotnet format ${{ env.SOLUTION_PATH }} --verify-no-changes --verbosity diagnostic
    
    - name: Run static analysis
      run: |
        dotnet build ${{ env.SOLUTION_PATH }} \
          --configuration Release \
          --verbosity normal \
          -p:TreatWarningsAsErrors=true \
          -p:Version=${{ needs.calculate-version.outputs.version }} \
          -p:PackageVersion=${{ needs.calculate-version.outputs.full-version }}

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [calculate-version, build-and-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
    
    - name: Build solution
      run: |
        dotnet build ${{ env.SOLUTION_PATH }} \
          --no-restore \
          --configuration Release \
          -p:Version=${{ needs.calculate-version.outputs.version }} \
          -p:PackageVersion=${{ needs.calculate-version.outputs.full-version }}
    
    - name: Run demo application for performance testing
      run: |
        if [ -d "src/Minotaur.Demo" ]; then
          cd src/Minotaur.Demo
          timeout 30s dotnet run --configuration Release || echo "Demo completed or timed out as expected"
        else
          echo "No demo projects found for performance testing"
        fi

  package:
    runs-on: ubuntu-latest
    needs: [calculate-version, build-and-test, code-quality, lint-and-format]
    if: github.event_name != 'pull_request'
    outputs:
      package-path: ${{ steps.package.outputs.package-path }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build for packaging
      run: |
        dotnet build ${{ env.SOLUTION_PATH }} \
          --configuration Release \
          --no-restore \
          -p:Version=${{ needs.calculate-version.outputs.version }} \
          -p:PackageVersion=${{ needs.calculate-version.outputs.full-version }}

    - name: Create NuGet package
      id: package
      run: |
        dotnet pack ${{ env.PROJECT_PATH }} \
          --configuration Release \
          --no-build \
          --output ./packages \
          -p:PackageVersion=${{ needs.calculate-version.outputs.full-version }}
        echo "package-path=./packages" >> $GITHUB_OUTPUT

    - name: Upload packages as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./packages/*.nupkg

  prerelease:
    runs-on: ubuntu-latest
    needs: [calculate-version, build-and-test, package]
    if: |
      github.event_name == 'push' && 
      (contains(github.ref, 'refs/heads/develop') || 
       contains(github.ref, 'refs/heads/copilot/') ||
       contains(github.ref, 'refs/heads/feature/'))
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: ./packages

    - name: Create Pre-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.calculate-version.outputs.full-version }}
        release_name: Minotaur v${{ needs.calculate-version.outputs.full-version }}
        body: |
          ## Minotaur Pre-release v${{ needs.calculate-version.outputs.full-version }}
          
          This is a pre-release version generated from branch: ${{ github.ref_name }}
          
          ### Changes
          - Enhanced location tracking precision APIs
          - Context modifier API exposure  
          - Rule activation callback implementation
          - Complete GrammarForge requirements implementation
          
          ### Installation
          ```bash
          dotnet add package DevelApp.Minotaur --version ${{ needs.calculate-version.outputs.full-version }}
          ```
          
          **Note**: This is a pre-release version intended for testing.
        draft: false
        prerelease: true

  release:
    runs-on: ubuntu-latest
    needs: [calculate-version, build-and-test, package]
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: ./packages

    - name: Publish to NuGet.org
      run: |
        dotnet nuget push ./packages/*.nupkg \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate

    - name: Create GitHub Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: ./packages/*.nupkg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    runs-on: ubuntu-latest
    needs: [build-and-test, package]
    if: always()
    steps:
    - name: Cleanup artifacts (if needed)
      run: echo "Pipeline completed. Artifacts preserved for download."